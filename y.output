   0  $accept : prog $end

   1  $$1 :

   2  prog : $$1 lclasse

   3  lclasse : classe lclasse
   4          |

   5  $$2 :

   6  classe : CLASS ID $$2 extends '{' corpoclasse '}'

   7  extends : EXTENDS ID
   8          |

   9  corpoclasse : PRIVATE ':' ldecl PUBLIC ':' lmet

  10  ldecl : decl ldecl
  11        |

  12  $$3 :

  13  decl : tipo ID $$3 arrayOuNao lid ';'

  14  arrayOuNao : '[' NUM ']'
  15             |

  16  $$4 :

  17  lid : ',' ID $$4 lid
  18      |

  19  lmet : met lmet
  20       |

  21  met : metconst
  22      | metnormal
  23      | metvoid

  24  $$5 :

  25  metconst : ID $$5 '(' lparam ')' ldecl '{' corpomet '}'

  26  $$6 :

  27  $$7 :

  28  metnormal : tipo $$6 arrayMetodoOuNao ID $$7 '(' lparam ')' ldecl '{' corpomet '}'

  29  $$8 :

  30  metvoid : VOID ID $$8 '(' lparam ')' ldecl '{' corpomet '}'

  31  arrayMetodoOuNao : '[' ']'
  32                   |

  33  lparam : param sublparam
  34         |

  35  param : tipo ID

  36  sublparam : ',' param sublparam
  37            |

  38  $$9 :

  39  lparamchamada : exp $$9 sublparamchamada
  40                |

  41  $$10 :

  42  sublparamchamada : ',' exp $$10 sublparamchamada
  43                   |

  44  $$11 :

  45  return : RETURN exp $$11 ';'

  46  exp : exp '+' exp
  47      | exp '*' exp
  48      | exp '-' exp
  49      | exp '/' exp
  50      | exp '>' exp
  51      | exp '<' exp
  52      | exp '%' exp
  53      | exp AND exp
  54      | exp OR exp
  55      | exp LEQ exp
  56      | exp GEQ exp
  57      | exp EQ exp
  58      | exp NEQ exp
  59      | NUM
  60      | NUMDOUBLE
  61      | TRUE
  62      | FALSE
  63      | LIT
  64      | '(' exp ')'
  65      | ID
  66      | exp '[' exp ']'
  67      | chamaMetodo
  68      | NEW chamaConstrutor

  69  corpomet : lcmdloop

  70  cmd : atrib ';'
  71      | escrita
  72      | leia
  73      | if
  74      | while
  75      | for
  76      | return

  77  $$12 :

  78  atrib : ID $$12 arrayOuNao '=' exp

  79  escrita : ESCREVA restoEscrita

  80  restoEscrita : exp contescrita ';'

  81  contescrita : ',' exp
  82              |

  83  $$13 :

  84  leia : LEIA ID $$13 ';'

  85  $$14 :

  86  if : IF exp $$14 ':' lcmdloop else

  87  else : ELSE ':' lcmdloop ENDIF
  88       | ENDIF

  89  $$15 :

  90  $$16 :

  91  while : WHILE exp $$15 ':' $$16 lcmdloop ENDWHILE

  92  $$17 :

  93  $$18 :

  94  for : FOR atrib ';' exp $$17 ';' atrib ':' $$18 lcmdloop ENDFOR

  95  break : BREAK ';'

  96  lcmdloop : cmd lcmdloop
  97           | break lcmdloop
  98           |

  99  $$19 :

 100  chamaMetodo : ID '.' ID $$19 '(' lparamchamada ')'

 101  $$20 :

 102  chamaConstrutor : ID $$20 '(' lparamchamada ')'

 103  tipo : INT
 104       | DOUBLE
 105       | STRING
 106       | BOOLEAN
 107       | ID

state 0
	$accept : . prog $end  (0)
	$$1 : .  (1)

	.  reduce 1

	prog  goto 1
	$$1  goto 2


state 1
	$accept : prog . $end  (0)

	$end  accept


state 2
	prog : $$1 . lclasse  (2)
	lclasse : .  (4)

	CLASS  shift 3
	$end  reduce 4

	lclasse  goto 4
	classe  goto 5


state 3
	classe : CLASS . ID $$2 extends '{' corpoclasse '}'  (6)

	ID  shift 6
	.  error


state 4
	prog : $$1 lclasse .  (2)

	.  reduce 2


state 5
	lclasse : classe . lclasse  (3)
	lclasse : .  (4)

	CLASS  shift 3
	$end  reduce 4

	lclasse  goto 7
	classe  goto 5


state 6
	classe : CLASS ID . $$2 extends '{' corpoclasse '}'  (6)
	$$2 : .  (5)

	.  reduce 5

	$$2  goto 8


state 7
	lclasse : classe lclasse .  (3)

	.  reduce 3


state 8
	classe : CLASS ID $$2 . extends '{' corpoclasse '}'  (6)
	extends : .  (8)

	EXTENDS  shift 9
	'{'  reduce 8

	extends  goto 10


state 9
	extends : EXTENDS . ID  (7)

	ID  shift 11
	.  error


state 10
	classe : CLASS ID $$2 extends . '{' corpoclasse '}'  (6)

	'{'  shift 12
	.  error


state 11
	extends : EXTENDS ID .  (7)

	.  reduce 7


state 12
	classe : CLASS ID $$2 extends '{' . corpoclasse '}'  (6)

	PRIVATE  shift 13
	.  error

	corpoclasse  goto 14


state 13
	corpoclasse : PRIVATE . ':' ldecl PUBLIC ':' lmet  (9)

	':'  shift 15
	.  error


state 14
	classe : CLASS ID $$2 extends '{' corpoclasse . '}'  (6)

	'}'  shift 16
	.  error


state 15
	corpoclasse : PRIVATE ':' . ldecl PUBLIC ':' lmet  (9)
	ldecl : .  (11)

	ID  shift 17
	INT  shift 18
	DOUBLE  shift 19
	STRING  shift 20
	BOOLEAN  shift 21
	PUBLIC  reduce 11

	tipo  goto 22
	ldecl  goto 23
	decl  goto 24


state 16
	classe : CLASS ID $$2 extends '{' corpoclasse '}' .  (6)

	.  reduce 6


state 17
	tipo : ID .  (107)

	.  reduce 107


state 18
	tipo : INT .  (103)

	.  reduce 103


state 19
	tipo : DOUBLE .  (104)

	.  reduce 104


state 20
	tipo : STRING .  (105)

	.  reduce 105


state 21
	tipo : BOOLEAN .  (106)

	.  reduce 106


state 22
	decl : tipo . ID $$3 arrayOuNao lid ';'  (13)

	ID  shift 25
	.  error


state 23
	corpoclasse : PRIVATE ':' ldecl . PUBLIC ':' lmet  (9)

	PUBLIC  shift 26
	.  error


state 24
	ldecl : decl . ldecl  (10)
	ldecl : .  (11)

	ID  shift 17
	INT  shift 18
	DOUBLE  shift 19
	STRING  shift 20
	BOOLEAN  shift 21
	PUBLIC  reduce 11
	'{'  reduce 11

	tipo  goto 22
	ldecl  goto 27
	decl  goto 24


state 25
	decl : tipo ID . $$3 arrayOuNao lid ';'  (13)
	$$3 : .  (12)

	.  reduce 12

	$$3  goto 28


state 26
	corpoclasse : PRIVATE ':' ldecl PUBLIC . ':' lmet  (9)

	':'  shift 29
	.  error


state 27
	ldecl : decl ldecl .  (10)

	.  reduce 10


state 28
	decl : tipo ID $$3 . arrayOuNao lid ';'  (13)
	arrayOuNao : .  (15)

	'['  shift 30
	';'  reduce 15
	','  reduce 15

	arrayOuNao  goto 31


state 29
	corpoclasse : PRIVATE ':' ldecl PUBLIC ':' . lmet  (9)
	lmet : .  (20)

	ID  shift 32
	INT  shift 18
	VOID  shift 33
	DOUBLE  shift 19
	STRING  shift 20
	BOOLEAN  shift 21
	'}'  reduce 20

	tipo  goto 34
	lmet  goto 35
	met  goto 36
	metconst  goto 37
	metnormal  goto 38
	metvoid  goto 39


state 30
	arrayOuNao : '[' . NUM ']'  (14)

	NUM  shift 40
	.  error


state 31
	decl : tipo ID $$3 arrayOuNao . lid ';'  (13)
	lid : .  (18)

	','  shift 41
	';'  reduce 18

	lid  goto 42


state 32
	metconst : ID . $$5 '(' lparam ')' ldecl '{' corpomet '}'  (25)
	tipo : ID .  (107)
	$$5 : .  (24)

	ID  reduce 107
	'['  reduce 107
	'('  reduce 24

	$$5  goto 43


state 33
	metvoid : VOID . ID $$8 '(' lparam ')' ldecl '{' corpomet '}'  (30)

	ID  shift 44
	.  error


state 34
	metnormal : tipo . $$6 arrayMetodoOuNao ID $$7 '(' lparam ')' ldecl '{' corpomet '}'  (28)
	$$6 : .  (26)

	.  reduce 26

	$$6  goto 45


state 35
	corpoclasse : PRIVATE ':' ldecl PUBLIC ':' lmet .  (9)

	.  reduce 9


state 36
	lmet : met . lmet  (19)
	lmet : .  (20)

	ID  shift 32
	INT  shift 18
	VOID  shift 33
	DOUBLE  shift 19
	STRING  shift 20
	BOOLEAN  shift 21
	'}'  reduce 20

	tipo  goto 34
	lmet  goto 46
	met  goto 36
	metconst  goto 37
	metnormal  goto 38
	metvoid  goto 39


state 37
	met : metconst .  (21)

	.  reduce 21


state 38
	met : metnormal .  (22)

	.  reduce 22


state 39
	met : metvoid .  (23)

	.  reduce 23


state 40
	arrayOuNao : '[' NUM . ']'  (14)

	']'  shift 47
	.  error


state 41
	lid : ',' . ID $$4 lid  (17)

	ID  shift 48
	.  error


state 42
	decl : tipo ID $$3 arrayOuNao lid . ';'  (13)

	';'  shift 49
	.  error


state 43
	metconst : ID $$5 . '(' lparam ')' ldecl '{' corpomet '}'  (25)

	'('  shift 50
	.  error


state 44
	metvoid : VOID ID . $$8 '(' lparam ')' ldecl '{' corpomet '}'  (30)
	$$8 : .  (29)

	.  reduce 29

	$$8  goto 51


state 45
	metnormal : tipo $$6 . arrayMetodoOuNao ID $$7 '(' lparam ')' ldecl '{' corpomet '}'  (28)
	arrayMetodoOuNao : .  (32)

	'['  shift 52
	ID  reduce 32

	arrayMetodoOuNao  goto 53


state 46
	lmet : met lmet .  (19)

	.  reduce 19


state 47
	arrayOuNao : '[' NUM ']' .  (14)

	.  reduce 14


state 48
	lid : ',' ID . $$4 lid  (17)
	$$4 : .  (16)

	.  reduce 16

	$$4  goto 54


state 49
	decl : tipo ID $$3 arrayOuNao lid ';' .  (13)

	.  reduce 13


state 50
	metconst : ID $$5 '(' . lparam ')' ldecl '{' corpomet '}'  (25)
	lparam : .  (34)

	ID  shift 17
	INT  shift 18
	DOUBLE  shift 19
	STRING  shift 20
	BOOLEAN  shift 21
	')'  reduce 34

	tipo  goto 55
	lparam  goto 56
	param  goto 57


state 51
	metvoid : VOID ID $$8 . '(' lparam ')' ldecl '{' corpomet '}'  (30)

	'('  shift 58
	.  error


state 52
	arrayMetodoOuNao : '[' . ']'  (31)

	']'  shift 59
	.  error


state 53
	metnormal : tipo $$6 arrayMetodoOuNao . ID $$7 '(' lparam ')' ldecl '{' corpomet '}'  (28)

	ID  shift 60
	.  error


state 54
	lid : ',' ID $$4 . lid  (17)
	lid : .  (18)

	','  shift 41
	';'  reduce 18

	lid  goto 61


state 55
	param : tipo . ID  (35)

	ID  shift 62
	.  error


state 56
	metconst : ID $$5 '(' lparam . ')' ldecl '{' corpomet '}'  (25)

	')'  shift 63
	.  error


state 57
	lparam : param . sublparam  (33)
	sublparam : .  (37)

	','  shift 64
	')'  reduce 37

	sublparam  goto 65


state 58
	metvoid : VOID ID $$8 '(' . lparam ')' ldecl '{' corpomet '}'  (30)
	lparam : .  (34)

	ID  shift 17
	INT  shift 18
	DOUBLE  shift 19
	STRING  shift 20
	BOOLEAN  shift 21
	')'  reduce 34

	tipo  goto 55
	lparam  goto 66
	param  goto 57


state 59
	arrayMetodoOuNao : '[' ']' .  (31)

	.  reduce 31


state 60
	metnormal : tipo $$6 arrayMetodoOuNao ID . $$7 '(' lparam ')' ldecl '{' corpomet '}'  (28)
	$$7 : .  (27)

	.  reduce 27

	$$7  goto 67


state 61
	lid : ',' ID $$4 lid .  (17)

	.  reduce 17


state 62
	param : tipo ID .  (35)

	.  reduce 35


state 63
	metconst : ID $$5 '(' lparam ')' . ldecl '{' corpomet '}'  (25)
	ldecl : .  (11)

	ID  shift 17
	INT  shift 18
	DOUBLE  shift 19
	STRING  shift 20
	BOOLEAN  shift 21
	'{'  reduce 11

	tipo  goto 22
	ldecl  goto 68
	decl  goto 24


state 64
	sublparam : ',' . param sublparam  (36)

	ID  shift 17
	INT  shift 18
	DOUBLE  shift 19
	STRING  shift 20
	BOOLEAN  shift 21
	.  error

	tipo  goto 55
	param  goto 69


state 65
	lparam : param sublparam .  (33)

	.  reduce 33


state 66
	metvoid : VOID ID $$8 '(' lparam . ')' ldecl '{' corpomet '}'  (30)

	')'  shift 70
	.  error


state 67
	metnormal : tipo $$6 arrayMetodoOuNao ID $$7 . '(' lparam ')' ldecl '{' corpomet '}'  (28)

	'('  shift 71
	.  error


state 68
	metconst : ID $$5 '(' lparam ')' ldecl . '{' corpomet '}'  (25)

	'{'  shift 72
	.  error


state 69
	sublparam : ',' param . sublparam  (36)
	sublparam : .  (37)

	','  shift 64
	')'  reduce 37

	sublparam  goto 73


state 70
	metvoid : VOID ID $$8 '(' lparam ')' . ldecl '{' corpomet '}'  (30)
	ldecl : .  (11)

	ID  shift 17
	INT  shift 18
	DOUBLE  shift 19
	STRING  shift 20
	BOOLEAN  shift 21
	'{'  reduce 11

	tipo  goto 22
	ldecl  goto 74
	decl  goto 24


state 71
	metnormal : tipo $$6 arrayMetodoOuNao ID $$7 '(' . lparam ')' ldecl '{' corpomet '}'  (28)
	lparam : .  (34)

	ID  shift 17
	INT  shift 18
	DOUBLE  shift 19
	STRING  shift 20
	BOOLEAN  shift 21
	')'  reduce 34

	tipo  goto 55
	lparam  goto 75
	param  goto 57


state 72
	metconst : ID $$5 '(' lparam ')' ldecl '{' . corpomet '}'  (25)
	lcmdloop : .  (98)

	ID  shift 76
	IF  shift 77
	RETURN  shift 78
	ESCREVA  shift 79
	LEIA  shift 80
	BREAK  shift 81
	WHILE  shift 82
	FOR  shift 83
	'}'  reduce 98

	corpomet  goto 84
	return  goto 85
	lcmdloop  goto 86
	cmd  goto 87
	atrib  goto 88
	escrita  goto 89
	leia  goto 90
	if  goto 91
	while  goto 92
	for  goto 93
	break  goto 94


state 73
	sublparam : ',' param sublparam .  (36)

	.  reduce 36


state 74
	metvoid : VOID ID $$8 '(' lparam ')' ldecl . '{' corpomet '}'  (30)

	'{'  shift 95
	.  error


state 75
	metnormal : tipo $$6 arrayMetodoOuNao ID $$7 '(' lparam . ')' ldecl '{' corpomet '}'  (28)

	')'  shift 96
	.  error


state 76
	atrib : ID . $$12 arrayOuNao '=' exp  (78)
	$$12 : .  (77)

	.  reduce 77

	$$12  goto 97


state 77
	if : IF . exp $$14 ':' lcmdloop else  (86)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 106
	chamaMetodo  goto 107


state 78
	return : RETURN . exp $$11 ';'  (45)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 108
	chamaMetodo  goto 107


state 79
	escrita : ESCREVA . restoEscrita  (79)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 109
	chamaMetodo  goto 107
	restoEscrita  goto 110


state 80
	leia : LEIA . ID $$13 ';'  (84)

	ID  shift 111
	.  error


state 81
	break : BREAK . ';'  (95)

	';'  shift 112
	.  error


state 82
	while : WHILE . exp $$15 ':' $$16 lcmdloop ENDWHILE  (91)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 113
	chamaMetodo  goto 107


state 83
	for : FOR . atrib ';' exp $$17 ';' atrib ':' $$18 lcmdloop ENDFOR  (94)

	ID  shift 76
	.  error

	atrib  goto 114


state 84
	metconst : ID $$5 '(' lparam ')' ldecl '{' corpomet . '}'  (25)

	'}'  shift 115
	.  error


state 85
	cmd : return .  (76)

	.  reduce 76


state 86
	corpomet : lcmdloop .  (69)

	.  reduce 69


state 87
	lcmdloop : cmd . lcmdloop  (96)
	lcmdloop : .  (98)

	ID  shift 76
	IF  shift 77
	RETURN  shift 78
	ESCREVA  shift 79
	LEIA  shift 80
	BREAK  shift 81
	WHILE  shift 82
	FOR  shift 83
	ELSE  reduce 98
	ENDIF  reduce 98
	ENDWHILE  reduce 98
	ENDFOR  reduce 98
	'}'  reduce 98

	return  goto 85
	lcmdloop  goto 116
	cmd  goto 87
	atrib  goto 88
	escrita  goto 89
	leia  goto 90
	if  goto 91
	while  goto 92
	for  goto 93
	break  goto 94


state 88
	cmd : atrib . ';'  (70)

	';'  shift 117
	.  error


state 89
	cmd : escrita .  (71)

	.  reduce 71


state 90
	cmd : leia .  (72)

	.  reduce 72


state 91
	cmd : if .  (73)

	.  reduce 73


state 92
	cmd : while .  (74)

	.  reduce 74


state 93
	cmd : for .  (75)

	.  reduce 75


state 94
	lcmdloop : break . lcmdloop  (97)
	lcmdloop : .  (98)

	ID  shift 76
	IF  shift 77
	RETURN  shift 78
	ESCREVA  shift 79
	LEIA  shift 80
	BREAK  shift 81
	WHILE  shift 82
	FOR  shift 83
	ELSE  reduce 98
	ENDIF  reduce 98
	ENDWHILE  reduce 98
	ENDFOR  reduce 98
	'}'  reduce 98

	return  goto 85
	lcmdloop  goto 118
	cmd  goto 87
	atrib  goto 88
	escrita  goto 89
	leia  goto 90
	if  goto 91
	while  goto 92
	for  goto 93
	break  goto 94


state 95
	metvoid : VOID ID $$8 '(' lparam ')' ldecl '{' . corpomet '}'  (30)
	lcmdloop : .  (98)

	ID  shift 76
	IF  shift 77
	RETURN  shift 78
	ESCREVA  shift 79
	LEIA  shift 80
	BREAK  shift 81
	WHILE  shift 82
	FOR  shift 83
	'}'  reduce 98

	corpomet  goto 119
	return  goto 85
	lcmdloop  goto 86
	cmd  goto 87
	atrib  goto 88
	escrita  goto 89
	leia  goto 90
	if  goto 91
	while  goto 92
	for  goto 93
	break  goto 94


state 96
	metnormal : tipo $$6 arrayMetodoOuNao ID $$7 '(' lparam ')' . ldecl '{' corpomet '}'  (28)
	ldecl : .  (11)

	ID  shift 17
	INT  shift 18
	DOUBLE  shift 19
	STRING  shift 20
	BOOLEAN  shift 21
	'{'  reduce 11

	tipo  goto 22
	ldecl  goto 120
	decl  goto 24


state 97
	atrib : ID $$12 . arrayOuNao '=' exp  (78)
	arrayOuNao : .  (15)

	'['  shift 30
	'='  reduce 15

	arrayOuNao  goto 121


state 98
	exp : ID .  (65)
	chamaMetodo : ID . '.' ID $$19 '(' lparamchamada ')'  (100)

	'.'  shift 122
	EQ  reduce 65
	LEQ  reduce 65
	GEQ  reduce 65
	NEQ  reduce 65
	AND  reduce 65
	OR  reduce 65
	'>'  reduce 65
	'<'  reduce 65
	'+'  reduce 65
	'-'  reduce 65
	'*'  reduce 65
	'/'  reduce 65
	'%'  reduce 65
	'['  reduce 65
	':'  reduce 65
	';'  reduce 65
	']'  reduce 65
	','  reduce 65
	')'  reduce 65


state 99
	exp : NUM .  (59)

	.  reduce 59


state 100
	exp : LIT .  (63)

	.  reduce 63


state 101
	exp : TRUE .  (61)

	.  reduce 61


state 102
	exp : FALSE .  (62)

	.  reduce 62


state 103
	exp : NEW . chamaConstrutor  (68)

	ID  shift 123
	.  error

	chamaConstrutor  goto 124


state 104
	exp : NUMDOUBLE .  (60)

	.  reduce 60


state 105
	exp : '(' . exp ')'  (64)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 125
	chamaMetodo  goto 107


state 106
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)
	if : IF exp . $$14 ':' lcmdloop else  (86)
	$$14 : .  (85)

	EQ  shift 126
	LEQ  shift 127
	GEQ  shift 128
	NEQ  shift 129
	AND  shift 130
	OR  shift 131
	'>'  shift 132
	'<'  shift 133
	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	':'  reduce 85

	$$14  goto 140


state 107
	exp : chamaMetodo .  (67)

	.  reduce 67


state 108
	return : RETURN exp . $$11 ';'  (45)
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)
	$$11 : .  (44)

	EQ  shift 126
	LEQ  shift 127
	GEQ  shift 128
	NEQ  shift 129
	AND  shift 130
	OR  shift 131
	'>'  shift 132
	'<'  shift 133
	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	';'  reduce 44

	$$11  goto 141


state 109
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)
	restoEscrita : exp . contescrita ';'  (80)
	contescrita : .  (82)

	EQ  shift 126
	LEQ  shift 127
	GEQ  shift 128
	NEQ  shift 129
	AND  shift 130
	OR  shift 131
	'>'  shift 132
	'<'  shift 133
	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	','  shift 142
	';'  reduce 82

	contescrita  goto 143


state 110
	escrita : ESCREVA restoEscrita .  (79)

	.  reduce 79


state 111
	leia : LEIA ID . $$13 ';'  (84)
	$$13 : .  (83)

	.  reduce 83

	$$13  goto 144


state 112
	break : BREAK ';' .  (95)

	.  reduce 95


state 113
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)
	while : WHILE exp . $$15 ':' $$16 lcmdloop ENDWHILE  (91)
	$$15 : .  (89)

	EQ  shift 126
	LEQ  shift 127
	GEQ  shift 128
	NEQ  shift 129
	AND  shift 130
	OR  shift 131
	'>'  shift 132
	'<'  shift 133
	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	':'  reduce 89

	$$15  goto 145


state 114
	for : FOR atrib . ';' exp $$17 ';' atrib ':' $$18 lcmdloop ENDFOR  (94)

	';'  shift 146
	.  error


state 115
	metconst : ID $$5 '(' lparam ')' ldecl '{' corpomet '}' .  (25)

	.  reduce 25


state 116
	lcmdloop : cmd lcmdloop .  (96)

	.  reduce 96


state 117
	cmd : atrib ';' .  (70)

	.  reduce 70


state 118
	lcmdloop : break lcmdloop .  (97)

	.  reduce 97


state 119
	metvoid : VOID ID $$8 '(' lparam ')' ldecl '{' corpomet . '}'  (30)

	'}'  shift 147
	.  error


state 120
	metnormal : tipo $$6 arrayMetodoOuNao ID $$7 '(' lparam ')' ldecl . '{' corpomet '}'  (28)

	'{'  shift 148
	.  error


state 121
	atrib : ID $$12 arrayOuNao . '=' exp  (78)

	'='  shift 149
	.  error


state 122
	chamaMetodo : ID '.' . ID $$19 '(' lparamchamada ')'  (100)

	ID  shift 150
	.  error


state 123
	chamaConstrutor : ID . $$20 '(' lparamchamada ')'  (102)
	$$20 : .  (101)

	.  reduce 101

	$$20  goto 151


state 124
	exp : NEW chamaConstrutor .  (68)

	.  reduce 68


state 125
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : '(' exp . ')'  (64)
	exp : exp . '[' exp ']'  (66)

	EQ  shift 126
	LEQ  shift 127
	GEQ  shift 128
	NEQ  shift 129
	AND  shift 130
	OR  shift 131
	'>'  shift 132
	'<'  shift 133
	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	')'  shift 152
	.  error


state 126
	exp : exp EQ . exp  (57)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 153
	chamaMetodo  goto 107


state 127
	exp : exp LEQ . exp  (55)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 154
	chamaMetodo  goto 107


state 128
	exp : exp GEQ . exp  (56)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 155
	chamaMetodo  goto 107


state 129
	exp : exp NEQ . exp  (58)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 156
	chamaMetodo  goto 107


state 130
	exp : exp AND . exp  (53)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 157
	chamaMetodo  goto 107


state 131
	exp : exp OR . exp  (54)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 158
	chamaMetodo  goto 107


state 132
	exp : exp '>' . exp  (50)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 159
	chamaMetodo  goto 107


state 133
	exp : exp '<' . exp  (51)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 160
	chamaMetodo  goto 107


state 134
	exp : exp '+' . exp  (46)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 161
	chamaMetodo  goto 107


state 135
	exp : exp '-' . exp  (48)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 162
	chamaMetodo  goto 107


state 136
	exp : exp '*' . exp  (47)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 163
	chamaMetodo  goto 107


state 137
	exp : exp '/' . exp  (49)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 164
	chamaMetodo  goto 107


state 138
	exp : exp '%' . exp  (52)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 165
	chamaMetodo  goto 107


state 139
	exp : exp '[' . exp ']'  (66)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 166
	chamaMetodo  goto 107


state 140
	if : IF exp $$14 . ':' lcmdloop else  (86)

	':'  shift 167
	.  error


state 141
	return : RETURN exp $$11 . ';'  (45)

	';'  shift 168
	.  error


state 142
	contescrita : ',' . exp  (81)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 169
	chamaMetodo  goto 107


state 143
	restoEscrita : exp contescrita . ';'  (80)

	';'  shift 170
	.  error


state 144
	leia : LEIA ID $$13 . ';'  (84)

	';'  shift 171
	.  error


state 145
	while : WHILE exp $$15 . ':' $$16 lcmdloop ENDWHILE  (91)

	':'  shift 172
	.  error


state 146
	for : FOR atrib ';' . exp $$17 ';' atrib ':' $$18 lcmdloop ENDFOR  (94)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 173
	chamaMetodo  goto 107


state 147
	metvoid : VOID ID $$8 '(' lparam ')' ldecl '{' corpomet '}' .  (30)

	.  reduce 30


state 148
	metnormal : tipo $$6 arrayMetodoOuNao ID $$7 '(' lparam ')' ldecl '{' . corpomet '}'  (28)
	lcmdloop : .  (98)

	ID  shift 76
	IF  shift 77
	RETURN  shift 78
	ESCREVA  shift 79
	LEIA  shift 80
	BREAK  shift 81
	WHILE  shift 82
	FOR  shift 83
	'}'  reduce 98

	corpomet  goto 174
	return  goto 85
	lcmdloop  goto 86
	cmd  goto 87
	atrib  goto 88
	escrita  goto 89
	leia  goto 90
	if  goto 91
	while  goto 92
	for  goto 93
	break  goto 94


state 149
	atrib : ID $$12 arrayOuNao '=' . exp  (78)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 175
	chamaMetodo  goto 107


state 150
	chamaMetodo : ID '.' ID . $$19 '(' lparamchamada ')'  (100)
	$$19 : .  (99)

	.  reduce 99

	$$19  goto 176


state 151
	chamaConstrutor : ID $$20 . '(' lparamchamada ')'  (102)

	'('  shift 177
	.  error


state 152
	exp : '(' exp ')' .  (64)

	.  reduce 64


state 153
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp EQ exp .  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)

	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	EQ  reduce 57
	LEQ  reduce 57
	GEQ  reduce 57
	NEQ  reduce 57
	AND  reduce 57
	OR  reduce 57
	'>'  reduce 57
	'<'  reduce 57
	':'  reduce 57
	';'  reduce 57
	']'  reduce 57
	','  reduce 57
	')'  reduce 57


state 154
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp LEQ exp .  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)

	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	EQ  reduce 55
	LEQ  reduce 55
	GEQ  reduce 55
	NEQ  reduce 55
	AND  reduce 55
	OR  reduce 55
	'>'  reduce 55
	'<'  reduce 55
	':'  reduce 55
	';'  reduce 55
	']'  reduce 55
	','  reduce 55
	')'  reduce 55


state 155
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp GEQ exp .  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)

	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	EQ  reduce 56
	LEQ  reduce 56
	GEQ  reduce 56
	NEQ  reduce 56
	AND  reduce 56
	OR  reduce 56
	'>'  reduce 56
	'<'  reduce 56
	':'  reduce 56
	';'  reduce 56
	']'  reduce 56
	','  reduce 56
	')'  reduce 56


state 156
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp NEQ exp .  (58)
	exp : exp . '[' exp ']'  (66)

	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	EQ  reduce 58
	LEQ  reduce 58
	GEQ  reduce 58
	NEQ  reduce 58
	AND  reduce 58
	OR  reduce 58
	'>'  reduce 58
	'<'  reduce 58
	':'  reduce 58
	';'  reduce 58
	']'  reduce 58
	','  reduce 58
	')'  reduce 58


state 157
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp AND exp .  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)

	EQ  shift 126
	LEQ  shift 127
	GEQ  shift 128
	NEQ  shift 129
	'>'  shift 132
	'<'  shift 133
	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	AND  reduce 53
	OR  reduce 53
	':'  reduce 53
	';'  reduce 53
	']'  reduce 53
	','  reduce 53
	')'  reduce 53


state 158
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp OR exp .  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)

	EQ  shift 126
	LEQ  shift 127
	GEQ  shift 128
	NEQ  shift 129
	AND  shift 130
	'>'  shift 132
	'<'  shift 133
	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	OR  reduce 54
	':'  reduce 54
	';'  reduce 54
	']'  reduce 54
	','  reduce 54
	')'  reduce 54


state 159
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp '>' exp .  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)

	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	EQ  reduce 50
	LEQ  reduce 50
	GEQ  reduce 50
	NEQ  reduce 50
	AND  reduce 50
	OR  reduce 50
	'>'  reduce 50
	'<'  reduce 50
	':'  reduce 50
	';'  reduce 50
	']'  reduce 50
	','  reduce 50
	')'  reduce 50


state 160
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp '<' exp .  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)

	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	EQ  reduce 51
	LEQ  reduce 51
	GEQ  reduce 51
	NEQ  reduce 51
	AND  reduce 51
	OR  reduce 51
	'>'  reduce 51
	'<'  reduce 51
	':'  reduce 51
	';'  reduce 51
	']'  reduce 51
	','  reduce 51
	')'  reduce 51


state 161
	exp : exp . '+' exp  (46)
	exp : exp '+' exp .  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)

	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	EQ  reduce 46
	LEQ  reduce 46
	GEQ  reduce 46
	NEQ  reduce 46
	AND  reduce 46
	OR  reduce 46
	'>'  reduce 46
	'<'  reduce 46
	'+'  reduce 46
	'-'  reduce 46
	':'  reduce 46
	';'  reduce 46
	']'  reduce 46
	','  reduce 46
	')'  reduce 46


state 162
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp '-' exp .  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)

	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	EQ  reduce 48
	LEQ  reduce 48
	GEQ  reduce 48
	NEQ  reduce 48
	AND  reduce 48
	OR  reduce 48
	'>'  reduce 48
	'<'  reduce 48
	'+'  reduce 48
	'-'  reduce 48
	':'  reduce 48
	';'  reduce 48
	']'  reduce 48
	','  reduce 48
	')'  reduce 48


state 163
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp '*' exp .  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)

	'['  shift 139
	EQ  reduce 47
	LEQ  reduce 47
	GEQ  reduce 47
	NEQ  reduce 47
	AND  reduce 47
	OR  reduce 47
	'>'  reduce 47
	'<'  reduce 47
	'+'  reduce 47
	'-'  reduce 47
	'*'  reduce 47
	'/'  reduce 47
	'%'  reduce 47
	':'  reduce 47
	';'  reduce 47
	']'  reduce 47
	','  reduce 47
	')'  reduce 47


state 164
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp '/' exp .  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)

	'['  shift 139
	EQ  reduce 49
	LEQ  reduce 49
	GEQ  reduce 49
	NEQ  reduce 49
	AND  reduce 49
	OR  reduce 49
	'>'  reduce 49
	'<'  reduce 49
	'+'  reduce 49
	'-'  reduce 49
	'*'  reduce 49
	'/'  reduce 49
	'%'  reduce 49
	':'  reduce 49
	';'  reduce 49
	']'  reduce 49
	','  reduce 49
	')'  reduce 49


state 165
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp '%' exp .  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)

	'['  shift 139
	EQ  reduce 52
	LEQ  reduce 52
	GEQ  reduce 52
	NEQ  reduce 52
	AND  reduce 52
	OR  reduce 52
	'>'  reduce 52
	'<'  reduce 52
	'+'  reduce 52
	'-'  reduce 52
	'*'  reduce 52
	'/'  reduce 52
	'%'  reduce 52
	':'  reduce 52
	';'  reduce 52
	']'  reduce 52
	','  reduce 52
	')'  reduce 52


state 166
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)
	exp : exp '[' exp . ']'  (66)

	EQ  shift 126
	LEQ  shift 127
	GEQ  shift 128
	NEQ  shift 129
	AND  shift 130
	OR  shift 131
	'>'  shift 132
	'<'  shift 133
	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	']'  shift 178
	.  error


state 167
	if : IF exp $$14 ':' . lcmdloop else  (86)
	lcmdloop : .  (98)

	ID  shift 76
	IF  shift 77
	RETURN  shift 78
	ESCREVA  shift 79
	LEIA  shift 80
	BREAK  shift 81
	WHILE  shift 82
	FOR  shift 83
	ELSE  reduce 98
	ENDIF  reduce 98

	return  goto 85
	lcmdloop  goto 179
	cmd  goto 87
	atrib  goto 88
	escrita  goto 89
	leia  goto 90
	if  goto 91
	while  goto 92
	for  goto 93
	break  goto 94


state 168
	return : RETURN exp $$11 ';' .  (45)

	.  reduce 45


state 169
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)
	contescrita : ',' exp .  (81)

	EQ  shift 126
	LEQ  shift 127
	GEQ  shift 128
	NEQ  shift 129
	AND  shift 130
	OR  shift 131
	'>'  shift 132
	'<'  shift 133
	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	';'  reduce 81


state 170
	restoEscrita : exp contescrita ';' .  (80)

	.  reduce 80


state 171
	leia : LEIA ID $$13 ';' .  (84)

	.  reduce 84


state 172
	while : WHILE exp $$15 ':' . $$16 lcmdloop ENDWHILE  (91)
	$$16 : .  (90)

	.  reduce 90

	$$16  goto 180


state 173
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)
	for : FOR atrib ';' exp . $$17 ';' atrib ':' $$18 lcmdloop ENDFOR  (94)
	$$17 : .  (92)

	EQ  shift 126
	LEQ  shift 127
	GEQ  shift 128
	NEQ  shift 129
	AND  shift 130
	OR  shift 131
	'>'  shift 132
	'<'  shift 133
	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	';'  reduce 92

	$$17  goto 181


state 174
	metnormal : tipo $$6 arrayMetodoOuNao ID $$7 '(' lparam ')' ldecl '{' corpomet . '}'  (28)

	'}'  shift 182
	.  error


state 175
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)
	atrib : ID $$12 arrayOuNao '=' exp .  (78)

	EQ  shift 126
	LEQ  shift 127
	GEQ  shift 128
	NEQ  shift 129
	AND  shift 130
	OR  shift 131
	'>'  shift 132
	'<'  shift 133
	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	':'  reduce 78
	';'  reduce 78


state 176
	chamaMetodo : ID '.' ID $$19 . '(' lparamchamada ')'  (100)

	'('  shift 183
	.  error


state 177
	chamaConstrutor : ID $$20 '(' . lparamchamada ')'  (102)
	lparamchamada : .  (40)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	')'  reduce 40

	exp  goto 184
	chamaMetodo  goto 107
	lparamchamada  goto 185


state 178
	exp : exp '[' exp ']' .  (66)

	.  reduce 66


state 179
	if : IF exp $$14 ':' lcmdloop . else  (86)

	ELSE  shift 186
	ENDIF  shift 187
	.  error

	else  goto 188


state 180
	while : WHILE exp $$15 ':' $$16 . lcmdloop ENDWHILE  (91)
	lcmdloop : .  (98)

	ID  shift 76
	IF  shift 77
	RETURN  shift 78
	ESCREVA  shift 79
	LEIA  shift 80
	BREAK  shift 81
	WHILE  shift 82
	FOR  shift 83
	ENDWHILE  reduce 98

	return  goto 85
	lcmdloop  goto 189
	cmd  goto 87
	atrib  goto 88
	escrita  goto 89
	leia  goto 90
	if  goto 91
	while  goto 92
	for  goto 93
	break  goto 94


state 181
	for : FOR atrib ';' exp $$17 . ';' atrib ':' $$18 lcmdloop ENDFOR  (94)

	';'  shift 190
	.  error


state 182
	metnormal : tipo $$6 arrayMetodoOuNao ID $$7 '(' lparam ')' ldecl '{' corpomet '}' .  (28)

	.  reduce 28


state 183
	chamaMetodo : ID '.' ID $$19 '(' . lparamchamada ')'  (100)
	lparamchamada : .  (40)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	')'  reduce 40

	exp  goto 184
	chamaMetodo  goto 107
	lparamchamada  goto 191


state 184
	lparamchamada : exp . $$9 sublparamchamada  (39)
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)
	$$9 : .  (38)

	EQ  shift 126
	LEQ  shift 127
	GEQ  shift 128
	NEQ  shift 129
	AND  shift 130
	OR  shift 131
	'>'  shift 132
	'<'  shift 133
	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	','  reduce 38
	')'  reduce 38

	$$9  goto 192


state 185
	chamaConstrutor : ID $$20 '(' lparamchamada . ')'  (102)

	')'  shift 193
	.  error


state 186
	else : ELSE . ':' lcmdloop ENDIF  (87)

	':'  shift 194
	.  error


state 187
	else : ENDIF .  (88)

	.  reduce 88


state 188
	if : IF exp $$14 ':' lcmdloop else .  (86)

	.  reduce 86


state 189
	while : WHILE exp $$15 ':' $$16 lcmdloop . ENDWHILE  (91)

	ENDWHILE  shift 195
	.  error


state 190
	for : FOR atrib ';' exp $$17 ';' . atrib ':' $$18 lcmdloop ENDFOR  (94)

	ID  shift 76
	.  error

	atrib  goto 196


state 191
	chamaMetodo : ID '.' ID $$19 '(' lparamchamada . ')'  (100)

	')'  shift 197
	.  error


state 192
	lparamchamada : exp $$9 . sublparamchamada  (39)
	sublparamchamada : .  (43)

	','  shift 198
	')'  reduce 43

	sublparamchamada  goto 199


state 193
	chamaConstrutor : ID $$20 '(' lparamchamada ')' .  (102)

	.  reduce 102


state 194
	else : ELSE ':' . lcmdloop ENDIF  (87)
	lcmdloop : .  (98)

	ID  shift 76
	IF  shift 77
	RETURN  shift 78
	ESCREVA  shift 79
	LEIA  shift 80
	BREAK  shift 81
	WHILE  shift 82
	FOR  shift 83
	ENDIF  reduce 98

	return  goto 85
	lcmdloop  goto 200
	cmd  goto 87
	atrib  goto 88
	escrita  goto 89
	leia  goto 90
	if  goto 91
	while  goto 92
	for  goto 93
	break  goto 94


state 195
	while : WHILE exp $$15 ':' $$16 lcmdloop ENDWHILE .  (91)

	.  reduce 91


state 196
	for : FOR atrib ';' exp $$17 ';' atrib . ':' $$18 lcmdloop ENDFOR  (94)

	':'  shift 201
	.  error


state 197
	chamaMetodo : ID '.' ID $$19 '(' lparamchamada ')' .  (100)

	.  reduce 100


state 198
	sublparamchamada : ',' . exp $$10 sublparamchamada  (42)

	ID  shift 98
	NUM  shift 99
	LIT  shift 100
	TRUE  shift 101
	FALSE  shift 102
	NEW  shift 103
	NUMDOUBLE  shift 104
	'('  shift 105
	.  error

	exp  goto 202
	chamaMetodo  goto 107


state 199
	lparamchamada : exp $$9 sublparamchamada .  (39)

	.  reduce 39


state 200
	else : ELSE ':' lcmdloop . ENDIF  (87)

	ENDIF  shift 203
	.  error


state 201
	for : FOR atrib ';' exp $$17 ';' atrib ':' . $$18 lcmdloop ENDFOR  (94)
	$$18 : .  (93)

	.  reduce 93

	$$18  goto 204


state 202
	sublparamchamada : ',' exp . $$10 sublparamchamada  (42)
	exp : exp . '+' exp  (46)
	exp : exp . '*' exp  (47)
	exp : exp . '-' exp  (48)
	exp : exp . '/' exp  (49)
	exp : exp . '>' exp  (50)
	exp : exp . '<' exp  (51)
	exp : exp . '%' exp  (52)
	exp : exp . AND exp  (53)
	exp : exp . OR exp  (54)
	exp : exp . LEQ exp  (55)
	exp : exp . GEQ exp  (56)
	exp : exp . EQ exp  (57)
	exp : exp . NEQ exp  (58)
	exp : exp . '[' exp ']'  (66)
	$$10 : .  (41)

	EQ  shift 126
	LEQ  shift 127
	GEQ  shift 128
	NEQ  shift 129
	AND  shift 130
	OR  shift 131
	'>'  shift 132
	'<'  shift 133
	'+'  shift 134
	'-'  shift 135
	'*'  shift 136
	'/'  shift 137
	'%'  shift 138
	'['  shift 139
	','  reduce 41
	')'  reduce 41

	$$10  goto 205


state 203
	else : ELSE ':' lcmdloop ENDIF .  (87)

	.  reduce 87


state 204
	for : FOR atrib ';' exp $$17 ';' atrib ':' $$18 . lcmdloop ENDFOR  (94)
	lcmdloop : .  (98)

	ID  shift 76
	IF  shift 77
	RETURN  shift 78
	ESCREVA  shift 79
	LEIA  shift 80
	BREAK  shift 81
	WHILE  shift 82
	FOR  shift 83
	ENDFOR  reduce 98

	return  goto 85
	lcmdloop  goto 206
	cmd  goto 87
	atrib  goto 88
	escrita  goto 89
	leia  goto 90
	if  goto 91
	while  goto 92
	for  goto 93
	break  goto 94


state 205
	sublparamchamada : ',' exp $$10 . sublparamchamada  (42)
	sublparamchamada : .  (43)

	','  shift 198
	')'  reduce 43

	sublparamchamada  goto 207


state 206
	for : FOR atrib ';' exp $$17 ';' atrib ':' $$18 lcmdloop . ENDFOR  (94)

	ENDFOR  shift 208
	.  error


state 207
	sublparamchamada : ',' exp $$10 sublparamchamada .  (42)

	.  reduce 42


state 208
	for : FOR atrib ';' exp $$17 ';' atrib ':' $$18 lcmdloop ENDFOR .  (94)

	.  reduce 94


59 terminals, 59 nonterminals
108 grammar rules, 209 states
