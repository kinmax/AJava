   0  $accept : prog $end

   1  prog : lclasse

   2  lclasse : classe lclasse
   3          |

   4  classe : CLASS ID '{' corpoclasse '}'

   5  corpoclasse : PRIVATE ':' latri PUBLIC ':' lmet

   6  latri : atri latri
   7        |

   8  atri : tipo ID lid ';'

   9  lid : ',' ID
  10      |

  11  lmet : met lmet
  12       |

  13  met : metconst
  14      | metmain
  15      | metnormal

  16  metconst : ID '(' lparam ')' latri '{' corpomet '}'

  17  metmain : VOID MAIN '(' ')' latri '{' corpomet '}'

  18  metnormal : tipo ID '(' lparam ')' latri '{' corpomet return '}'

  19  metvoid : VOID ID '(' lparam ')' latri '{' corpomet '}'

  20  lparam : param sublparam
  21         |

  22  param : tipo ID

  23  sublparam : ',' param sublparam
  24            |

  25  return : RETURN exp ';'

  26  exp : exp '+' exp
  27      | exp '>' exp
  28      | exp AND exp
  29      | NUM
  30      | '(' exp ')'
  31      | ID
  32      | lvalue '=' exp
  33      | exp '[' exp ']'

  34  lvalue : ID
  35         | ID '.' ID

  36  corpomet : lcmd

  37  lcmd : cmd lcmd
  38       |

  39  cmd : atrib
  40      | escrita
  41      | leia
  42      | if
  43      | while
  44      | for

  45  atrib : ID '=' exp ';'

  46  escrita : ESCREVA LIT contescrita ';'

  47  contescrita : ',' exp
  48              |

  49  leia : LEIA ID ';'

  50  if : IF exp ':' lcmd else endif

  51  else : ELSE ':' lcmd
  52       |

  53  endif : ENDIF

  54  lcmdloop : cmd lcmdloop
  55           | BREAK
  56           |

  57  while : WHILE exp ':' lcmdloop endwhile

  58  endwhile : ENDWHILE

  59  for : FOR ID '=' exp ';' exp ';' exp ':' lcmdloop endfor

  60  endfor : ENDFOR

  61  chamaMetodo : ID '.' ID '(' lparam ')'

  62  tipo : INT
  63       | DOUBLE
  64       | STRING
  65       | BOOLEAN
  66       | ID

state 0
	$accept : . prog $end  (0)
	lclasse : .  (3)

	CLASS  shift 1
	$end  reduce 3

	prog  goto 2
	lclasse  goto 3
	classe  goto 4


state 1
	classe : CLASS . ID '{' corpoclasse '}'  (4)

	ID  shift 5
	.  error


state 2
	$accept : prog . $end  (0)

	$end  accept


state 3
	prog : lclasse .  (1)

	.  reduce 1


state 4
	lclasse : classe . lclasse  (2)
	lclasse : .  (3)

	CLASS  shift 1
	$end  reduce 3

	lclasse  goto 6
	classe  goto 4


state 5
	classe : CLASS ID . '{' corpoclasse '}'  (4)

	'{'  shift 7
	.  error


state 6
	lclasse : classe lclasse .  (2)

	.  reduce 2


state 7
	classe : CLASS ID '{' . corpoclasse '}'  (4)

	PRIVATE  shift 8
	.  error

	corpoclasse  goto 9


state 8
	corpoclasse : PRIVATE . ':' latri PUBLIC ':' lmet  (5)

	':'  shift 10
	.  error


state 9
	classe : CLASS ID '{' corpoclasse . '}'  (4)

	'}'  shift 11
	.  error


state 10
	corpoclasse : PRIVATE ':' . latri PUBLIC ':' lmet  (5)
	latri : .  (7)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	PUBLIC  reduce 7

	tipo  goto 17
	latri  goto 18
	atri  goto 19


state 11
	classe : CLASS ID '{' corpoclasse '}' .  (4)

	.  reduce 4


state 12
	tipo : ID .  (66)

	.  reduce 66


state 13
	tipo : INT .  (62)

	.  reduce 62


state 14
	tipo : DOUBLE .  (63)

	.  reduce 63


state 15
	tipo : STRING .  (64)

	.  reduce 64


state 16
	tipo : BOOLEAN .  (65)

	.  reduce 65


state 17
	atri : tipo . ID lid ';'  (8)

	ID  shift 20
	.  error


state 18
	corpoclasse : PRIVATE ':' latri . PUBLIC ':' lmet  (5)

	PUBLIC  shift 21
	.  error


state 19
	latri : atri . latri  (6)
	latri : .  (7)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	PUBLIC  reduce 7
	'{'  reduce 7

	tipo  goto 17
	latri  goto 22
	atri  goto 19


state 20
	atri : tipo ID . lid ';'  (8)
	lid : .  (10)

	','  shift 23
	';'  reduce 10

	lid  goto 24


state 21
	corpoclasse : PRIVATE ':' latri PUBLIC . ':' lmet  (5)

	':'  shift 25
	.  error


state 22
	latri : atri latri .  (6)

	.  reduce 6


state 23
	lid : ',' . ID  (9)

	ID  shift 26
	.  error


state 24
	atri : tipo ID lid . ';'  (8)

	';'  shift 27
	.  error


state 25
	corpoclasse : PRIVATE ':' latri PUBLIC ':' . lmet  (5)
	lmet : .  (12)

	ID  shift 28
	INT  shift 13
	VOID  shift 29
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	'}'  reduce 12

	tipo  goto 30
	lmet  goto 31
	met  goto 32
	metconst  goto 33
	metmain  goto 34
	metnormal  goto 35


state 26
	lid : ',' ID .  (9)

	.  reduce 9


state 27
	atri : tipo ID lid ';' .  (8)

	.  reduce 8


state 28
	metconst : ID . '(' lparam ')' latri '{' corpomet '}'  (16)
	tipo : ID .  (66)

	'('  shift 36
	ID  reduce 66


state 29
	metmain : VOID . MAIN '(' ')' latri '{' corpomet '}'  (17)

	MAIN  shift 37
	.  error


state 30
	metnormal : tipo . ID '(' lparam ')' latri '{' corpomet return '}'  (18)

	ID  shift 38
	.  error


state 31
	corpoclasse : PRIVATE ':' latri PUBLIC ':' lmet .  (5)

	.  reduce 5


state 32
	lmet : met . lmet  (11)
	lmet : .  (12)

	ID  shift 28
	INT  shift 13
	VOID  shift 29
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	'}'  reduce 12

	tipo  goto 30
	lmet  goto 39
	met  goto 32
	metconst  goto 33
	metmain  goto 34
	metnormal  goto 35


state 33
	met : metconst .  (13)

	.  reduce 13


state 34
	met : metmain .  (14)

	.  reduce 14


state 35
	met : metnormal .  (15)

	.  reduce 15


state 36
	metconst : ID '(' . lparam ')' latri '{' corpomet '}'  (16)
	lparam : .  (21)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	')'  reduce 21

	tipo  goto 40
	lparam  goto 41
	param  goto 42


state 37
	metmain : VOID MAIN . '(' ')' latri '{' corpomet '}'  (17)

	'('  shift 43
	.  error


state 38
	metnormal : tipo ID . '(' lparam ')' latri '{' corpomet return '}'  (18)

	'('  shift 44
	.  error


state 39
	lmet : met lmet .  (11)

	.  reduce 11


state 40
	param : tipo . ID  (22)

	ID  shift 45
	.  error


state 41
	metconst : ID '(' lparam . ')' latri '{' corpomet '}'  (16)

	')'  shift 46
	.  error


state 42
	lparam : param . sublparam  (20)
	sublparam : .  (24)

	','  shift 47
	')'  reduce 24

	sublparam  goto 48


state 43
	metmain : VOID MAIN '(' . ')' latri '{' corpomet '}'  (17)

	')'  shift 49
	.  error


state 44
	metnormal : tipo ID '(' . lparam ')' latri '{' corpomet return '}'  (18)
	lparam : .  (21)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	')'  reduce 21

	tipo  goto 40
	lparam  goto 50
	param  goto 42


state 45
	param : tipo ID .  (22)

	.  reduce 22


state 46
	metconst : ID '(' lparam ')' . latri '{' corpomet '}'  (16)
	latri : .  (7)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	'{'  reduce 7

	tipo  goto 17
	latri  goto 51
	atri  goto 19


state 47
	sublparam : ',' . param sublparam  (23)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	.  error

	tipo  goto 40
	param  goto 52


state 48
	lparam : param sublparam .  (20)

	.  reduce 20


state 49
	metmain : VOID MAIN '(' ')' . latri '{' corpomet '}'  (17)
	latri : .  (7)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	'{'  reduce 7

	tipo  goto 17
	latri  goto 53
	atri  goto 19


state 50
	metnormal : tipo ID '(' lparam . ')' latri '{' corpomet return '}'  (18)

	')'  shift 54
	.  error


state 51
	metconst : ID '(' lparam ')' latri . '{' corpomet '}'  (16)

	'{'  shift 55
	.  error


state 52
	sublparam : ',' param . sublparam  (23)
	sublparam : .  (24)

	','  shift 47
	')'  reduce 24

	sublparam  goto 56


state 53
	metmain : VOID MAIN '(' ')' latri . '{' corpomet '}'  (17)

	'{'  shift 57
	.  error


state 54
	metnormal : tipo ID '(' lparam ')' . latri '{' corpomet return '}'  (18)
	latri : .  (7)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	'{'  reduce 7

	tipo  goto 17
	latri  goto 58
	atri  goto 19


state 55
	metconst : ID '(' lparam ')' latri '{' . corpomet '}'  (16)
	lcmd : .  (38)

	ID  shift 59
	IF  shift 60
	ESCREVA  shift 61
	LEIA  shift 62
	WHILE  shift 63
	FOR  shift 64
	'}'  reduce 38

	corpomet  goto 65
	lcmd  goto 66
	cmd  goto 67
	atrib  goto 68
	escrita  goto 69
	leia  goto 70
	if  goto 71
	while  goto 72
	for  goto 73


state 56
	sublparam : ',' param sublparam .  (23)

	.  reduce 23


state 57
	metmain : VOID MAIN '(' ')' latri '{' . corpomet '}'  (17)
	lcmd : .  (38)

	ID  shift 59
	IF  shift 60
	ESCREVA  shift 61
	LEIA  shift 62
	WHILE  shift 63
	FOR  shift 64
	'}'  reduce 38

	corpomet  goto 74
	lcmd  goto 66
	cmd  goto 67
	atrib  goto 68
	escrita  goto 69
	leia  goto 70
	if  goto 71
	while  goto 72
	for  goto 73


state 58
	metnormal : tipo ID '(' lparam ')' latri . '{' corpomet return '}'  (18)

	'{'  shift 75
	.  error


state 59
	atrib : ID . '=' exp ';'  (45)

	'='  shift 76
	.  error


state 60
	if : IF . exp ':' lcmd else endif  (50)

	ID  shift 77
	NUM  shift 78
	'('  shift 79
	.  error

	exp  goto 80
	lvalue  goto 81


state 61
	escrita : ESCREVA . LIT contescrita ';'  (46)

	LIT  shift 82
	.  error


state 62
	leia : LEIA . ID ';'  (49)

	ID  shift 83
	.  error


state 63
	while : WHILE . exp ':' lcmdloop endwhile  (57)

	ID  shift 77
	NUM  shift 78
	'('  shift 79
	.  error

	exp  goto 84
	lvalue  goto 81


state 64
	for : FOR . ID '=' exp ';' exp ';' exp ':' lcmdloop endfor  (59)

	ID  shift 85
	.  error


state 65
	metconst : ID '(' lparam ')' latri '{' corpomet . '}'  (16)

	'}'  shift 86
	.  error


state 66
	corpomet : lcmd .  (36)

	.  reduce 36


state 67
	lcmd : cmd . lcmd  (37)
	lcmd : .  (38)

	ID  shift 59
	IF  shift 60
	ESCREVA  shift 61
	LEIA  shift 62
	WHILE  shift 63
	FOR  shift 64
	ELSE  reduce 38
	RETURN  reduce 38
	ENDIF  reduce 38
	'}'  reduce 38

	lcmd  goto 87
	cmd  goto 67
	atrib  goto 68
	escrita  goto 69
	leia  goto 70
	if  goto 71
	while  goto 72
	for  goto 73


state 68
	cmd : atrib .  (39)

	.  reduce 39


state 69
	cmd : escrita .  (40)

	.  reduce 40


state 70
	cmd : leia .  (41)

	.  reduce 41


state 71
	cmd : if .  (42)

	.  reduce 42


state 72
	cmd : while .  (43)

	.  reduce 43


state 73
	cmd : for .  (44)

	.  reduce 44


state 74
	metmain : VOID MAIN '(' ')' latri '{' corpomet . '}'  (17)

	'}'  shift 88
	.  error


state 75
	metnormal : tipo ID '(' lparam ')' latri '{' . corpomet return '}'  (18)
	lcmd : .  (38)

	ID  shift 59
	IF  shift 60
	ESCREVA  shift 61
	LEIA  shift 62
	WHILE  shift 63
	FOR  shift 64
	RETURN  reduce 38

	corpomet  goto 89
	lcmd  goto 66
	cmd  goto 67
	atrib  goto 68
	escrita  goto 69
	leia  goto 70
	if  goto 71
	while  goto 72
	for  goto 73


state 76
	atrib : ID '=' . exp ';'  (45)

	ID  shift 77
	NUM  shift 78
	'('  shift 79
	.  error

	exp  goto 90
	lvalue  goto 81


state 77
	exp : ID .  (31)
	lvalue : ID .  (34)
	lvalue : ID . '.' ID  (35)

	'.'  shift 91
	AND  reduce 31
	'='  reduce 34
	'>'  reduce 31
	'+'  reduce 31
	'['  reduce 31
	':'  reduce 31
	';'  reduce 31
	')'  reduce 31
	']'  reduce 31


state 78
	exp : NUM .  (29)

	.  reduce 29


state 79
	exp : '(' . exp ')'  (30)

	ID  shift 77
	NUM  shift 78
	'('  shift 79
	.  error

	exp  goto 92
	lvalue  goto 81


state 80
	exp : exp . '+' exp  (26)
	exp : exp . '>' exp  (27)
	exp : exp . AND exp  (28)
	exp : exp . '[' exp ']'  (33)
	if : IF exp . ':' lcmd else endif  (50)

	AND  shift 93
	'>'  shift 94
	'+'  shift 95
	'['  shift 96
	':'  shift 97
	.  error


state 81
	exp : lvalue . '=' exp  (32)

	'='  shift 98
	.  error


state 82
	escrita : ESCREVA LIT . contescrita ';'  (46)
	contescrita : .  (48)

	','  shift 99
	';'  reduce 48

	contescrita  goto 100


state 83
	leia : LEIA ID . ';'  (49)

	';'  shift 101
	.  error


state 84
	exp : exp . '+' exp  (26)
	exp : exp . '>' exp  (27)
	exp : exp . AND exp  (28)
	exp : exp . '[' exp ']'  (33)
	while : WHILE exp . ':' lcmdloop endwhile  (57)

	AND  shift 93
	'>'  shift 94
	'+'  shift 95
	'['  shift 96
	':'  shift 102
	.  error


state 85
	for : FOR ID . '=' exp ';' exp ';' exp ':' lcmdloop endfor  (59)

	'='  shift 103
	.  error


state 86
	metconst : ID '(' lparam ')' latri '{' corpomet '}' .  (16)

	.  reduce 16


state 87
	lcmd : cmd lcmd .  (37)

	.  reduce 37


state 88
	metmain : VOID MAIN '(' ')' latri '{' corpomet '}' .  (17)

	.  reduce 17


state 89
	metnormal : tipo ID '(' lparam ')' latri '{' corpomet . return '}'  (18)

	RETURN  shift 104
	.  error

	return  goto 105


state 90
	exp : exp . '+' exp  (26)
	exp : exp . '>' exp  (27)
	exp : exp . AND exp  (28)
	exp : exp . '[' exp ']'  (33)
	atrib : ID '=' exp . ';'  (45)

	AND  shift 93
	'>'  shift 94
	'+'  shift 95
	'['  shift 96
	';'  shift 106
	.  error


state 91
	lvalue : ID '.' . ID  (35)

	ID  shift 107
	.  error


state 92
	exp : exp . '+' exp  (26)
	exp : exp . '>' exp  (27)
	exp : exp . AND exp  (28)
	exp : '(' exp . ')'  (30)
	exp : exp . '[' exp ']'  (33)

	AND  shift 93
	'>'  shift 94
	'+'  shift 95
	'['  shift 96
	')'  shift 108
	.  error


state 93
	exp : exp AND . exp  (28)

	ID  shift 77
	NUM  shift 78
	'('  shift 79
	.  error

	exp  goto 109
	lvalue  goto 81


state 94
	exp : exp '>' . exp  (27)

	ID  shift 77
	NUM  shift 78
	'('  shift 79
	.  error

	exp  goto 110
	lvalue  goto 81


state 95
	exp : exp '+' . exp  (26)

	ID  shift 77
	NUM  shift 78
	'('  shift 79
	.  error

	exp  goto 111
	lvalue  goto 81


state 96
	exp : exp '[' . exp ']'  (33)

	ID  shift 77
	NUM  shift 78
	'('  shift 79
	.  error

	exp  goto 112
	lvalue  goto 81


state 97
	if : IF exp ':' . lcmd else endif  (50)
	lcmd : .  (38)

	ID  shift 59
	IF  shift 60
	ESCREVA  shift 61
	LEIA  shift 62
	WHILE  shift 63
	FOR  shift 64
	ELSE  reduce 38
	ENDIF  reduce 38

	lcmd  goto 113
	cmd  goto 67
	atrib  goto 68
	escrita  goto 69
	leia  goto 70
	if  goto 71
	while  goto 72
	for  goto 73


state 98
	exp : lvalue '=' . exp  (32)

	ID  shift 77
	NUM  shift 78
	'('  shift 79
	.  error

	exp  goto 114
	lvalue  goto 81


state 99
	contescrita : ',' . exp  (47)

	ID  shift 77
	NUM  shift 78
	'('  shift 79
	.  error

	exp  goto 115
	lvalue  goto 81


state 100
	escrita : ESCREVA LIT contescrita . ';'  (46)

	';'  shift 116
	.  error


state 101
	leia : LEIA ID ';' .  (49)

	.  reduce 49


state 102
	while : WHILE exp ':' . lcmdloop endwhile  (57)
	lcmdloop : .  (56)

	ID  shift 59
	IF  shift 60
	ESCREVA  shift 61
	LEIA  shift 62
	BREAK  shift 117
	WHILE  shift 63
	FOR  shift 64
	ENDWHILE  reduce 56

	cmd  goto 118
	atrib  goto 68
	escrita  goto 69
	leia  goto 70
	if  goto 71
	while  goto 72
	for  goto 73
	lcmdloop  goto 119


state 103
	for : FOR ID '=' . exp ';' exp ';' exp ':' lcmdloop endfor  (59)

	ID  shift 77
	NUM  shift 78
	'('  shift 79
	.  error

	exp  goto 120
	lvalue  goto 81


state 104
	return : RETURN . exp ';'  (25)

	ID  shift 77
	NUM  shift 78
	'('  shift 79
	.  error

	exp  goto 121
	lvalue  goto 81


state 105
	metnormal : tipo ID '(' lparam ')' latri '{' corpomet return . '}'  (18)

	'}'  shift 122
	.  error


state 106
	atrib : ID '=' exp ';' .  (45)

	.  reduce 45


state 107
	lvalue : ID '.' ID .  (35)

	.  reduce 35


state 108
	exp : '(' exp ')' .  (30)

	.  reduce 30


state 109
	exp : exp . '+' exp  (26)
	exp : exp . '>' exp  (27)
	exp : exp . AND exp  (28)
	exp : exp AND exp .  (28)
	exp : exp . '[' exp ']'  (33)

	'>'  shift 94
	'+'  shift 95
	'['  shift 96
	AND  reduce 28
	':'  reduce 28
	';'  reduce 28
	')'  reduce 28
	']'  reduce 28


state 110
	exp : exp . '+' exp  (26)
	exp : exp . '>' exp  (27)
	exp : exp '>' exp .  (27)
	exp : exp . AND exp  (28)
	exp : exp . '[' exp ']'  (33)

	'+'  shift 95
	'['  shift 96
	AND  reduce 27
	'>'  reduce 27
	':'  reduce 27
	';'  reduce 27
	')'  reduce 27
	']'  reduce 27


state 111
	exp : exp . '+' exp  (26)
	exp : exp '+' exp .  (26)
	exp : exp . '>' exp  (27)
	exp : exp . AND exp  (28)
	exp : exp . '[' exp ']'  (33)

	'['  shift 96
	AND  reduce 26
	'>'  reduce 26
	'+'  reduce 26
	':'  reduce 26
	';'  reduce 26
	')'  reduce 26
	']'  reduce 26


state 112
	exp : exp . '+' exp  (26)
	exp : exp . '>' exp  (27)
	exp : exp . AND exp  (28)
	exp : exp . '[' exp ']'  (33)
	exp : exp '[' exp . ']'  (33)

	AND  shift 93
	'>'  shift 94
	'+'  shift 95
	'['  shift 96
	']'  shift 123
	.  error


state 113
	if : IF exp ':' lcmd . else endif  (50)
	else : .  (52)

	ELSE  shift 124
	ENDIF  reduce 52

	else  goto 125


state 114
	exp : exp . '+' exp  (26)
	exp : exp . '>' exp  (27)
	exp : exp . AND exp  (28)
	exp : lvalue '=' exp .  (32)
	exp : exp . '[' exp ']'  (33)

	AND  shift 93
	'>'  shift 94
	'+'  shift 95
	'['  shift 96
	':'  reduce 32
	';'  reduce 32
	')'  reduce 32
	']'  reduce 32


state 115
	exp : exp . '+' exp  (26)
	exp : exp . '>' exp  (27)
	exp : exp . AND exp  (28)
	exp : exp . '[' exp ']'  (33)
	contescrita : ',' exp .  (47)

	AND  shift 93
	'>'  shift 94
	'+'  shift 95
	'['  shift 96
	';'  reduce 47


state 116
	escrita : ESCREVA LIT contescrita ';' .  (46)

	.  reduce 46


state 117
	lcmdloop : BREAK .  (55)

	.  reduce 55


state 118
	lcmdloop : cmd . lcmdloop  (54)
	lcmdloop : .  (56)

	ID  shift 59
	IF  shift 60
	ESCREVA  shift 61
	LEIA  shift 62
	BREAK  shift 117
	WHILE  shift 63
	FOR  shift 64
	ENDWHILE  reduce 56
	ENDFOR  reduce 56

	cmd  goto 118
	atrib  goto 68
	escrita  goto 69
	leia  goto 70
	if  goto 71
	while  goto 72
	for  goto 73
	lcmdloop  goto 126


state 119
	while : WHILE exp ':' lcmdloop . endwhile  (57)

	ENDWHILE  shift 127
	.  error

	endwhile  goto 128


state 120
	exp : exp . '+' exp  (26)
	exp : exp . '>' exp  (27)
	exp : exp . AND exp  (28)
	exp : exp . '[' exp ']'  (33)
	for : FOR ID '=' exp . ';' exp ';' exp ':' lcmdloop endfor  (59)

	AND  shift 93
	'>'  shift 94
	'+'  shift 95
	'['  shift 96
	';'  shift 129
	.  error


state 121
	return : RETURN exp . ';'  (25)
	exp : exp . '+' exp  (26)
	exp : exp . '>' exp  (27)
	exp : exp . AND exp  (28)
	exp : exp . '[' exp ']'  (33)

	AND  shift 93
	'>'  shift 94
	'+'  shift 95
	'['  shift 96
	';'  shift 130
	.  error


state 122
	metnormal : tipo ID '(' lparam ')' latri '{' corpomet return '}' .  (18)

	.  reduce 18


state 123
	exp : exp '[' exp ']' .  (33)

	.  reduce 33


state 124
	else : ELSE . ':' lcmd  (51)

	':'  shift 131
	.  error


state 125
	if : IF exp ':' lcmd else . endif  (50)

	ENDIF  shift 132
	.  error

	endif  goto 133


state 126
	lcmdloop : cmd lcmdloop .  (54)

	.  reduce 54


state 127
	endwhile : ENDWHILE .  (58)

	.  reduce 58


state 128
	while : WHILE exp ':' lcmdloop endwhile .  (57)

	.  reduce 57


state 129
	for : FOR ID '=' exp ';' . exp ';' exp ':' lcmdloop endfor  (59)

	ID  shift 77
	NUM  shift 78
	'('  shift 79
	.  error

	exp  goto 134
	lvalue  goto 81


state 130
	return : RETURN exp ';' .  (25)

	.  reduce 25


state 131
	else : ELSE ':' . lcmd  (51)
	lcmd : .  (38)

	ID  shift 59
	IF  shift 60
	ESCREVA  shift 61
	LEIA  shift 62
	WHILE  shift 63
	FOR  shift 64
	ENDIF  reduce 38

	lcmd  goto 135
	cmd  goto 67
	atrib  goto 68
	escrita  goto 69
	leia  goto 70
	if  goto 71
	while  goto 72
	for  goto 73


state 132
	endif : ENDIF .  (53)

	.  reduce 53


state 133
	if : IF exp ':' lcmd else endif .  (50)

	.  reduce 50


state 134
	exp : exp . '+' exp  (26)
	exp : exp . '>' exp  (27)
	exp : exp . AND exp  (28)
	exp : exp . '[' exp ']'  (33)
	for : FOR ID '=' exp ';' exp . ';' exp ':' lcmdloop endfor  (59)

	AND  shift 93
	'>'  shift 94
	'+'  shift 95
	'['  shift 96
	';'  shift 136
	.  error


state 135
	else : ELSE ':' lcmd .  (51)

	.  reduce 51


state 136
	for : FOR ID '=' exp ';' exp ';' . exp ':' lcmdloop endfor  (59)

	ID  shift 77
	NUM  shift 78
	'('  shift 79
	.  error

	exp  goto 137
	lvalue  goto 81


state 137
	exp : exp . '+' exp  (26)
	exp : exp . '>' exp  (27)
	exp : exp . AND exp  (28)
	exp : exp . '[' exp ']'  (33)
	for : FOR ID '=' exp ';' exp ';' exp . ':' lcmdloop endfor  (59)

	AND  shift 93
	'>'  shift 94
	'+'  shift 95
	'['  shift 96
	':'  shift 138
	.  error


state 138
	for : FOR ID '=' exp ';' exp ';' exp ':' . lcmdloop endfor  (59)
	lcmdloop : .  (56)

	ID  shift 59
	IF  shift 60
	ESCREVA  shift 61
	LEIA  shift 62
	BREAK  shift 117
	WHILE  shift 63
	FOR  shift 64
	ENDFOR  reduce 56

	cmd  goto 118
	atrib  goto 68
	escrita  goto 69
	leia  goto 70
	if  goto 71
	while  goto 72
	for  goto 73
	lcmdloop  goto 139


state 139
	for : FOR ID '=' exp ';' exp ';' exp ':' lcmdloop . endfor  (59)

	ENDFOR  shift 140
	.  error

	endfor  goto 141


state 140
	endfor : ENDFOR .  (60)

	.  reduce 60


state 141
	for : FOR ID '=' exp ';' exp ';' exp ':' lcmdloop endfor .  (59)

	.  reduce 59


Rules never reduced:
	metvoid : VOID ID '(' lparam ')' latri '{' corpomet '}'  (19)
	chamaMetodo : ID '.' ID '(' lparam ')'  (61)


58 terminals, 37 nonterminals
67 grammar rules, 142 states
