   0  $accept : prog $end

   1  prog : lclasse

   2  lclasse : classe lclasse
   3          |

   4  classe : CLASS ID '{' corpoclasse '}'

   5  corpoclasse : PRIVATE ':' latri PUBLIC ':' lmet

   6  latri : atri latri
   7        |

   8  atri : tipo ID lid ';'

   9  lid : ',' ID
  10      |

  11  lmet : met lmet
  12       |

  13  met : metconst
  14      | metmain
  15      | metnormal
  16      | metvoid

  17  metconst : ID '(' lparam ')' latri '{' corpomet '}'

  18  metmain : VOID MAIN '(' ')' latri '{' corpomet '}'

  19  metnormal : tipo ID '(' lparam ')' latri '{' corpomet return '}'

  20  metvoid : VOID ID '(' lparam ')' latri '{' corpomet '}'

  21  lparam : param sublparam
  22         |

  23  param : tipo ID

  24  sublparam : ',' param sublparam
  25            |

  26  return : RETURN exp ';'

  27  exp : exp '+' exp
  28      | exp '*' exp
  29      | exp '-' exp
  30      | exp '/' exp
  31      | exp '>' exp
  32      | exp '<' exp
  33      | exp AND exp
  34      | exp OR exp
  35      | exp LEQ exp
  36      | exp GEQ exp
  37      | exp EQ exp
  38      | exp NEQ exp
  39      | NUM
  40      | NUMDOUBLE
  41      | TRUE
  42      | FALSE
  43      | LIT
  44      | '(' exp ')'
  45      | ID
  46      | lvalue '=' exp
  47      | chamaMetodo

  48  lvalue : ID
  49         | ID '.' ID

  50  corpomet : lcmd

  51  lcmd : cmd lcmd
  52       |

  53  cmd : atrib
  54      | escrita
  55      | leia
  56      | if
  57      | while
  58      | for

  59  atrib : ID '=' exp ';'

  60  escrita : ESCREVA LIT contescrita ';'

  61  contescrita : ',' exp
  62              |

  63  leia : LEIA ID ';'

  64  if : IF exp ':' lcmd else endif

  65  else : ELSE ':' lcmd
  66       |

  67  endif : ENDIF

  68  lcmdloop : cmd lcmdloop
  69           | BREAK
  70           |

  71  while : WHILE exp ':' lcmdloop endwhile

  72  endwhile : ENDWHILE

  73  for : FOR ID '=' exp ';' exp ';' exp ':' lcmdloop endfor

  74  endfor : ENDFOR

  75  chamaMetodo : ID '.' ID '(' lparam ')'

  76  tipo : INT
  77       | DOUBLE
  78       | STRING
  79       | BOOLEAN
  80       | ID

state 0
	$accept : . prog $end  (0)
	lclasse : .  (3)

	CLASS  shift 1
	$end  reduce 3

	prog  goto 2
	lclasse  goto 3
	classe  goto 4


state 1
	classe : CLASS . ID '{' corpoclasse '}'  (4)

	ID  shift 5
	.  error


state 2
	$accept : prog . $end  (0)

	$end  accept


state 3
	prog : lclasse .  (1)

	.  reduce 1


state 4
	lclasse : classe . lclasse  (2)
	lclasse : .  (3)

	CLASS  shift 1
	$end  reduce 3

	lclasse  goto 6
	classe  goto 4


state 5
	classe : CLASS ID . '{' corpoclasse '}'  (4)

	'{'  shift 7
	.  error


state 6
	lclasse : classe lclasse .  (2)

	.  reduce 2


state 7
	classe : CLASS ID '{' . corpoclasse '}'  (4)

	PRIVATE  shift 8
	.  error

	corpoclasse  goto 9


state 8
	corpoclasse : PRIVATE . ':' latri PUBLIC ':' lmet  (5)

	':'  shift 10
	.  error


state 9
	classe : CLASS ID '{' corpoclasse . '}'  (4)

	'}'  shift 11
	.  error


state 10
	corpoclasse : PRIVATE ':' . latri PUBLIC ':' lmet  (5)
	latri : .  (7)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	PUBLIC  reduce 7

	tipo  goto 17
	latri  goto 18
	atri  goto 19


state 11
	classe : CLASS ID '{' corpoclasse '}' .  (4)

	.  reduce 4


state 12
	tipo : ID .  (80)

	.  reduce 80


state 13
	tipo : INT .  (76)

	.  reduce 76


state 14
	tipo : DOUBLE .  (77)

	.  reduce 77


state 15
	tipo : STRING .  (78)

	.  reduce 78


state 16
	tipo : BOOLEAN .  (79)

	.  reduce 79


state 17
	atri : tipo . ID lid ';'  (8)

	ID  shift 20
	.  error


state 18
	corpoclasse : PRIVATE ':' latri . PUBLIC ':' lmet  (5)

	PUBLIC  shift 21
	.  error


state 19
	latri : atri . latri  (6)
	latri : .  (7)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	PUBLIC  reduce 7
	'{'  reduce 7

	tipo  goto 17
	latri  goto 22
	atri  goto 19


state 20
	atri : tipo ID . lid ';'  (8)
	lid : .  (10)

	','  shift 23
	';'  reduce 10

	lid  goto 24


state 21
	corpoclasse : PRIVATE ':' latri PUBLIC . ':' lmet  (5)

	':'  shift 25
	.  error


state 22
	latri : atri latri .  (6)

	.  reduce 6


state 23
	lid : ',' . ID  (9)

	ID  shift 26
	.  error


state 24
	atri : tipo ID lid . ';'  (8)

	';'  shift 27
	.  error


state 25
	corpoclasse : PRIVATE ':' latri PUBLIC ':' . lmet  (5)
	lmet : .  (12)

	ID  shift 28
	INT  shift 13
	VOID  shift 29
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	'}'  reduce 12

	tipo  goto 30
	lmet  goto 31
	met  goto 32
	metconst  goto 33
	metmain  goto 34
	metnormal  goto 35
	metvoid  goto 36


state 26
	lid : ',' ID .  (9)

	.  reduce 9


state 27
	atri : tipo ID lid ';' .  (8)

	.  reduce 8


state 28
	metconst : ID . '(' lparam ')' latri '{' corpomet '}'  (17)
	tipo : ID .  (80)

	'('  shift 37
	ID  reduce 80


state 29
	metmain : VOID . MAIN '(' ')' latri '{' corpomet '}'  (18)
	metvoid : VOID . ID '(' lparam ')' latri '{' corpomet '}'  (20)

	ID  shift 38
	MAIN  shift 39
	.  error


state 30
	metnormal : tipo . ID '(' lparam ')' latri '{' corpomet return '}'  (19)

	ID  shift 40
	.  error


state 31
	corpoclasse : PRIVATE ':' latri PUBLIC ':' lmet .  (5)

	.  reduce 5


state 32
	lmet : met . lmet  (11)
	lmet : .  (12)

	ID  shift 28
	INT  shift 13
	VOID  shift 29
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	'}'  reduce 12

	tipo  goto 30
	lmet  goto 41
	met  goto 32
	metconst  goto 33
	metmain  goto 34
	metnormal  goto 35
	metvoid  goto 36


state 33
	met : metconst .  (13)

	.  reduce 13


state 34
	met : metmain .  (14)

	.  reduce 14


state 35
	met : metnormal .  (15)

	.  reduce 15


state 36
	met : metvoid .  (16)

	.  reduce 16


state 37
	metconst : ID '(' . lparam ')' latri '{' corpomet '}'  (17)
	lparam : .  (22)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	')'  reduce 22

	tipo  goto 42
	lparam  goto 43
	param  goto 44


state 38
	metvoid : VOID ID . '(' lparam ')' latri '{' corpomet '}'  (20)

	'('  shift 45
	.  error


state 39
	metmain : VOID MAIN . '(' ')' latri '{' corpomet '}'  (18)

	'('  shift 46
	.  error


state 40
	metnormal : tipo ID . '(' lparam ')' latri '{' corpomet return '}'  (19)

	'('  shift 47
	.  error


state 41
	lmet : met lmet .  (11)

	.  reduce 11


state 42
	param : tipo . ID  (23)

	ID  shift 48
	.  error


state 43
	metconst : ID '(' lparam . ')' latri '{' corpomet '}'  (17)

	')'  shift 49
	.  error


state 44
	lparam : param . sublparam  (21)
	sublparam : .  (25)

	','  shift 50
	')'  reduce 25

	sublparam  goto 51


state 45
	metvoid : VOID ID '(' . lparam ')' latri '{' corpomet '}'  (20)
	lparam : .  (22)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	')'  reduce 22

	tipo  goto 42
	lparam  goto 52
	param  goto 44


state 46
	metmain : VOID MAIN '(' . ')' latri '{' corpomet '}'  (18)

	')'  shift 53
	.  error


state 47
	metnormal : tipo ID '(' . lparam ')' latri '{' corpomet return '}'  (19)
	lparam : .  (22)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	')'  reduce 22

	tipo  goto 42
	lparam  goto 54
	param  goto 44


state 48
	param : tipo ID .  (23)

	.  reduce 23


state 49
	metconst : ID '(' lparam ')' . latri '{' corpomet '}'  (17)
	latri : .  (7)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	'{'  reduce 7

	tipo  goto 17
	latri  goto 55
	atri  goto 19


state 50
	sublparam : ',' . param sublparam  (24)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	.  error

	tipo  goto 42
	param  goto 56


state 51
	lparam : param sublparam .  (21)

	.  reduce 21


state 52
	metvoid : VOID ID '(' lparam . ')' latri '{' corpomet '}'  (20)

	')'  shift 57
	.  error


state 53
	metmain : VOID MAIN '(' ')' . latri '{' corpomet '}'  (18)
	latri : .  (7)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	'{'  reduce 7

	tipo  goto 17
	latri  goto 58
	atri  goto 19


state 54
	metnormal : tipo ID '(' lparam . ')' latri '{' corpomet return '}'  (19)

	')'  shift 59
	.  error


state 55
	metconst : ID '(' lparam ')' latri . '{' corpomet '}'  (17)

	'{'  shift 60
	.  error


state 56
	sublparam : ',' param . sublparam  (24)
	sublparam : .  (25)

	','  shift 50
	')'  reduce 25

	sublparam  goto 61


state 57
	metvoid : VOID ID '(' lparam ')' . latri '{' corpomet '}'  (20)
	latri : .  (7)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	'{'  reduce 7

	tipo  goto 17
	latri  goto 62
	atri  goto 19


state 58
	metmain : VOID MAIN '(' ')' latri . '{' corpomet '}'  (18)

	'{'  shift 63
	.  error


state 59
	metnormal : tipo ID '(' lparam ')' . latri '{' corpomet return '}'  (19)
	latri : .  (7)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	'{'  reduce 7

	tipo  goto 17
	latri  goto 64
	atri  goto 19


state 60
	metconst : ID '(' lparam ')' latri '{' . corpomet '}'  (17)
	lcmd : .  (52)

	ID  shift 65
	IF  shift 66
	ESCREVA  shift 67
	LEIA  shift 68
	WHILE  shift 69
	FOR  shift 70
	'}'  reduce 52

	corpomet  goto 71
	lcmd  goto 72
	cmd  goto 73
	atrib  goto 74
	escrita  goto 75
	leia  goto 76
	if  goto 77
	while  goto 78
	for  goto 79


state 61
	sublparam : ',' param sublparam .  (24)

	.  reduce 24


state 62
	metvoid : VOID ID '(' lparam ')' latri . '{' corpomet '}'  (20)

	'{'  shift 80
	.  error


state 63
	metmain : VOID MAIN '(' ')' latri '{' . corpomet '}'  (18)
	lcmd : .  (52)

	ID  shift 65
	IF  shift 66
	ESCREVA  shift 67
	LEIA  shift 68
	WHILE  shift 69
	FOR  shift 70
	'}'  reduce 52

	corpomet  goto 81
	lcmd  goto 72
	cmd  goto 73
	atrib  goto 74
	escrita  goto 75
	leia  goto 76
	if  goto 77
	while  goto 78
	for  goto 79


state 64
	metnormal : tipo ID '(' lparam ')' latri . '{' corpomet return '}'  (19)

	'{'  shift 82
	.  error


state 65
	atrib : ID . '=' exp ';'  (59)

	'='  shift 83
	.  error


state 66
	if : IF . exp ':' lcmd else endif  (64)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 91
	lvalue  goto 92
	chamaMetodo  goto 93


state 67
	escrita : ESCREVA . LIT contescrita ';'  (60)

	LIT  shift 94
	.  error


state 68
	leia : LEIA . ID ';'  (63)

	ID  shift 95
	.  error


state 69
	while : WHILE . exp ':' lcmdloop endwhile  (71)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 96
	lvalue  goto 92
	chamaMetodo  goto 93


state 70
	for : FOR . ID '=' exp ';' exp ';' exp ':' lcmdloop endfor  (73)

	ID  shift 97
	.  error


state 71
	metconst : ID '(' lparam ')' latri '{' corpomet . '}'  (17)

	'}'  shift 98
	.  error


state 72
	corpomet : lcmd .  (50)

	.  reduce 50


state 73
	lcmd : cmd . lcmd  (51)
	lcmd : .  (52)

	ID  shift 65
	IF  shift 66
	ESCREVA  shift 67
	LEIA  shift 68
	WHILE  shift 69
	FOR  shift 70
	ELSE  reduce 52
	RETURN  reduce 52
	ENDIF  reduce 52
	'}'  reduce 52

	lcmd  goto 99
	cmd  goto 73
	atrib  goto 74
	escrita  goto 75
	leia  goto 76
	if  goto 77
	while  goto 78
	for  goto 79


state 74
	cmd : atrib .  (53)

	.  reduce 53


state 75
	cmd : escrita .  (54)

	.  reduce 54


state 76
	cmd : leia .  (55)

	.  reduce 55


state 77
	cmd : if .  (56)

	.  reduce 56


state 78
	cmd : while .  (57)

	.  reduce 57


state 79
	cmd : for .  (58)

	.  reduce 58


state 80
	metvoid : VOID ID '(' lparam ')' latri '{' . corpomet '}'  (20)
	lcmd : .  (52)

	ID  shift 65
	IF  shift 66
	ESCREVA  shift 67
	LEIA  shift 68
	WHILE  shift 69
	FOR  shift 70
	'}'  reduce 52

	corpomet  goto 100
	lcmd  goto 72
	cmd  goto 73
	atrib  goto 74
	escrita  goto 75
	leia  goto 76
	if  goto 77
	while  goto 78
	for  goto 79


state 81
	metmain : VOID MAIN '(' ')' latri '{' corpomet . '}'  (18)

	'}'  shift 101
	.  error


state 82
	metnormal : tipo ID '(' lparam ')' latri '{' . corpomet return '}'  (19)
	lcmd : .  (52)

	ID  shift 65
	IF  shift 66
	ESCREVA  shift 67
	LEIA  shift 68
	WHILE  shift 69
	FOR  shift 70
	RETURN  reduce 52

	corpomet  goto 102
	lcmd  goto 72
	cmd  goto 73
	atrib  goto 74
	escrita  goto 75
	leia  goto 76
	if  goto 77
	while  goto 78
	for  goto 79


state 83
	atrib : ID '=' . exp ';'  (59)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 103
	lvalue  goto 92
	chamaMetodo  goto 93


state 84
	exp : ID .  (45)
	lvalue : ID .  (48)
	lvalue : ID . '.' ID  (49)
	chamaMetodo : ID . '.' ID '(' lparam ')'  (75)

	'.'  shift 104
	EQ  reduce 45
	LEQ  reduce 45
	GEQ  reduce 45
	NEQ  reduce 45
	AND  reduce 45
	OR  reduce 45
	'='  reduce 48
	'>'  reduce 45
	'<'  reduce 45
	'+'  reduce 45
	'-'  reduce 45
	'*'  reduce 45
	'/'  reduce 45
	':'  reduce 45
	';'  reduce 45
	')'  reduce 45


state 85
	exp : NUM .  (39)

	.  reduce 39


state 86
	exp : LIT .  (43)

	.  reduce 43


state 87
	exp : TRUE .  (41)

	.  reduce 41


state 88
	exp : FALSE .  (42)

	.  reduce 42


state 89
	exp : NUMDOUBLE .  (40)

	.  reduce 40


state 90
	exp : '(' . exp ')'  (44)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 105
	lvalue  goto 92
	chamaMetodo  goto 93


state 91
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)
	if : IF exp . ':' lcmd else endif  (64)

	EQ  shift 106
	LEQ  shift 107
	GEQ  shift 108
	NEQ  shift 109
	AND  shift 110
	OR  shift 111
	'>'  shift 112
	'<'  shift 113
	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	':'  shift 118
	.  error


state 92
	exp : lvalue . '=' exp  (46)

	'='  shift 119
	.  error


state 93
	exp : chamaMetodo .  (47)

	.  reduce 47


state 94
	escrita : ESCREVA LIT . contescrita ';'  (60)
	contescrita : .  (62)

	','  shift 120
	';'  reduce 62

	contescrita  goto 121


state 95
	leia : LEIA ID . ';'  (63)

	';'  shift 122
	.  error


state 96
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)
	while : WHILE exp . ':' lcmdloop endwhile  (71)

	EQ  shift 106
	LEQ  shift 107
	GEQ  shift 108
	NEQ  shift 109
	AND  shift 110
	OR  shift 111
	'>'  shift 112
	'<'  shift 113
	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	':'  shift 123
	.  error


state 97
	for : FOR ID . '=' exp ';' exp ';' exp ':' lcmdloop endfor  (73)

	'='  shift 124
	.  error


state 98
	metconst : ID '(' lparam ')' latri '{' corpomet '}' .  (17)

	.  reduce 17


state 99
	lcmd : cmd lcmd .  (51)

	.  reduce 51


state 100
	metvoid : VOID ID '(' lparam ')' latri '{' corpomet . '}'  (20)

	'}'  shift 125
	.  error


state 101
	metmain : VOID MAIN '(' ')' latri '{' corpomet '}' .  (18)

	.  reduce 18


state 102
	metnormal : tipo ID '(' lparam ')' latri '{' corpomet . return '}'  (19)

	RETURN  shift 126
	.  error

	return  goto 127


state 103
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)
	atrib : ID '=' exp . ';'  (59)

	EQ  shift 106
	LEQ  shift 107
	GEQ  shift 108
	NEQ  shift 109
	AND  shift 110
	OR  shift 111
	'>'  shift 112
	'<'  shift 113
	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	';'  shift 128
	.  error


state 104
	lvalue : ID '.' . ID  (49)
	chamaMetodo : ID '.' . ID '(' lparam ')'  (75)

	ID  shift 129
	.  error


state 105
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)
	exp : '(' exp . ')'  (44)

	EQ  shift 106
	LEQ  shift 107
	GEQ  shift 108
	NEQ  shift 109
	AND  shift 110
	OR  shift 111
	'>'  shift 112
	'<'  shift 113
	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	')'  shift 130
	.  error


state 106
	exp : exp EQ . exp  (37)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 131
	lvalue  goto 92
	chamaMetodo  goto 93


state 107
	exp : exp LEQ . exp  (35)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 132
	lvalue  goto 92
	chamaMetodo  goto 93


state 108
	exp : exp GEQ . exp  (36)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 133
	lvalue  goto 92
	chamaMetodo  goto 93


state 109
	exp : exp NEQ . exp  (38)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 134
	lvalue  goto 92
	chamaMetodo  goto 93


state 110
	exp : exp AND . exp  (33)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 135
	lvalue  goto 92
	chamaMetodo  goto 93


state 111
	exp : exp OR . exp  (34)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 136
	lvalue  goto 92
	chamaMetodo  goto 93


state 112
	exp : exp '>' . exp  (31)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 137
	lvalue  goto 92
	chamaMetodo  goto 93


state 113
	exp : exp '<' . exp  (32)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 138
	lvalue  goto 92
	chamaMetodo  goto 93


state 114
	exp : exp '+' . exp  (27)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 139
	lvalue  goto 92
	chamaMetodo  goto 93


state 115
	exp : exp '-' . exp  (29)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 140
	lvalue  goto 92
	chamaMetodo  goto 93


state 116
	exp : exp '*' . exp  (28)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 141
	lvalue  goto 92
	chamaMetodo  goto 93


state 117
	exp : exp '/' . exp  (30)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 142
	lvalue  goto 92
	chamaMetodo  goto 93


state 118
	if : IF exp ':' . lcmd else endif  (64)
	lcmd : .  (52)

	ID  shift 65
	IF  shift 66
	ESCREVA  shift 67
	LEIA  shift 68
	WHILE  shift 69
	FOR  shift 70
	ELSE  reduce 52
	ENDIF  reduce 52

	lcmd  goto 143
	cmd  goto 73
	atrib  goto 74
	escrita  goto 75
	leia  goto 76
	if  goto 77
	while  goto 78
	for  goto 79


state 119
	exp : lvalue '=' . exp  (46)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 144
	lvalue  goto 92
	chamaMetodo  goto 93


state 120
	contescrita : ',' . exp  (61)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 145
	lvalue  goto 92
	chamaMetodo  goto 93


state 121
	escrita : ESCREVA LIT contescrita . ';'  (60)

	';'  shift 146
	.  error


state 122
	leia : LEIA ID ';' .  (63)

	.  reduce 63


state 123
	while : WHILE exp ':' . lcmdloop endwhile  (71)
	lcmdloop : .  (70)

	ID  shift 65
	IF  shift 66
	ESCREVA  shift 67
	LEIA  shift 68
	BREAK  shift 147
	WHILE  shift 69
	FOR  shift 70
	ENDWHILE  reduce 70

	cmd  goto 148
	atrib  goto 74
	escrita  goto 75
	leia  goto 76
	if  goto 77
	while  goto 78
	for  goto 79
	lcmdloop  goto 149


state 124
	for : FOR ID '=' . exp ';' exp ';' exp ':' lcmdloop endfor  (73)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 150
	lvalue  goto 92
	chamaMetodo  goto 93


state 125
	metvoid : VOID ID '(' lparam ')' latri '{' corpomet '}' .  (20)

	.  reduce 20


state 126
	return : RETURN . exp ';'  (26)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 151
	lvalue  goto 92
	chamaMetodo  goto 93


state 127
	metnormal : tipo ID '(' lparam ')' latri '{' corpomet return . '}'  (19)

	'}'  shift 152
	.  error


state 128
	atrib : ID '=' exp ';' .  (59)

	.  reduce 59


state 129
	lvalue : ID '.' ID .  (49)
	chamaMetodo : ID '.' ID . '(' lparam ')'  (75)

	'('  shift 153
	'='  reduce 49


state 130
	exp : '(' exp ')' .  (44)

	.  reduce 44


state 131
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp EQ exp .  (37)
	exp : exp . NEQ exp  (38)

	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	EQ  reduce 37
	LEQ  reduce 37
	GEQ  reduce 37
	NEQ  reduce 37
	AND  reduce 37
	OR  reduce 37
	'>'  reduce 37
	'<'  reduce 37
	':'  reduce 37
	';'  reduce 37
	')'  reduce 37


state 132
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp LEQ exp .  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)

	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	EQ  reduce 35
	LEQ  reduce 35
	GEQ  reduce 35
	NEQ  reduce 35
	AND  reduce 35
	OR  reduce 35
	'>'  reduce 35
	'<'  reduce 35
	':'  reduce 35
	';'  reduce 35
	')'  reduce 35


state 133
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp GEQ exp .  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)

	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	EQ  reduce 36
	LEQ  reduce 36
	GEQ  reduce 36
	NEQ  reduce 36
	AND  reduce 36
	OR  reduce 36
	'>'  reduce 36
	'<'  reduce 36
	':'  reduce 36
	';'  reduce 36
	')'  reduce 36


state 134
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)
	exp : exp NEQ exp .  (38)

	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	EQ  reduce 38
	LEQ  reduce 38
	GEQ  reduce 38
	NEQ  reduce 38
	AND  reduce 38
	OR  reduce 38
	'>'  reduce 38
	'<'  reduce 38
	':'  reduce 38
	';'  reduce 38
	')'  reduce 38


state 135
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp AND exp .  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)

	EQ  shift 106
	LEQ  shift 107
	GEQ  shift 108
	NEQ  shift 109
	'>'  shift 112
	'<'  shift 113
	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	AND  reduce 33
	OR  reduce 33
	':'  reduce 33
	';'  reduce 33
	')'  reduce 33


state 136
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp OR exp .  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)

	EQ  shift 106
	LEQ  shift 107
	GEQ  shift 108
	NEQ  shift 109
	AND  shift 110
	'>'  shift 112
	'<'  shift 113
	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	OR  reduce 34
	':'  reduce 34
	';'  reduce 34
	')'  reduce 34


state 137
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp '>' exp .  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)

	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	EQ  reduce 31
	LEQ  reduce 31
	GEQ  reduce 31
	NEQ  reduce 31
	AND  reduce 31
	OR  reduce 31
	'>'  reduce 31
	'<'  reduce 31
	':'  reduce 31
	';'  reduce 31
	')'  reduce 31


state 138
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp '<' exp .  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)

	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	EQ  reduce 32
	LEQ  reduce 32
	GEQ  reduce 32
	NEQ  reduce 32
	AND  reduce 32
	OR  reduce 32
	'>'  reduce 32
	'<'  reduce 32
	':'  reduce 32
	';'  reduce 32
	')'  reduce 32


state 139
	exp : exp . '+' exp  (27)
	exp : exp '+' exp .  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)

	'*'  shift 116
	'/'  shift 117
	EQ  reduce 27
	LEQ  reduce 27
	GEQ  reduce 27
	NEQ  reduce 27
	AND  reduce 27
	OR  reduce 27
	'>'  reduce 27
	'<'  reduce 27
	'+'  reduce 27
	'-'  reduce 27
	':'  reduce 27
	';'  reduce 27
	')'  reduce 27


state 140
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp '-' exp .  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)

	'*'  shift 116
	'/'  shift 117
	EQ  reduce 29
	LEQ  reduce 29
	GEQ  reduce 29
	NEQ  reduce 29
	AND  reduce 29
	OR  reduce 29
	'>'  reduce 29
	'<'  reduce 29
	'+'  reduce 29
	'-'  reduce 29
	':'  reduce 29
	';'  reduce 29
	')'  reduce 29


state 141
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp '*' exp .  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)

	.  reduce 28


state 142
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp '/' exp .  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)

	.  reduce 30


state 143
	if : IF exp ':' lcmd . else endif  (64)
	else : .  (66)

	ELSE  shift 154
	ENDIF  reduce 66

	else  goto 155


state 144
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)
	exp : lvalue '=' exp .  (46)

	EQ  shift 106
	LEQ  shift 107
	GEQ  shift 108
	NEQ  shift 109
	AND  shift 110
	OR  shift 111
	'>'  shift 112
	'<'  shift 113
	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	':'  reduce 46
	';'  reduce 46
	')'  reduce 46


state 145
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)
	contescrita : ',' exp .  (61)

	EQ  shift 106
	LEQ  shift 107
	GEQ  shift 108
	NEQ  shift 109
	AND  shift 110
	OR  shift 111
	'>'  shift 112
	'<'  shift 113
	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	';'  reduce 61


state 146
	escrita : ESCREVA LIT contescrita ';' .  (60)

	.  reduce 60


state 147
	lcmdloop : BREAK .  (69)

	.  reduce 69


state 148
	lcmdloop : cmd . lcmdloop  (68)
	lcmdloop : .  (70)

	ID  shift 65
	IF  shift 66
	ESCREVA  shift 67
	LEIA  shift 68
	BREAK  shift 147
	WHILE  shift 69
	FOR  shift 70
	ENDWHILE  reduce 70
	ENDFOR  reduce 70

	cmd  goto 148
	atrib  goto 74
	escrita  goto 75
	leia  goto 76
	if  goto 77
	while  goto 78
	for  goto 79
	lcmdloop  goto 156


state 149
	while : WHILE exp ':' lcmdloop . endwhile  (71)

	ENDWHILE  shift 157
	.  error

	endwhile  goto 158


state 150
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)
	for : FOR ID '=' exp . ';' exp ';' exp ':' lcmdloop endfor  (73)

	EQ  shift 106
	LEQ  shift 107
	GEQ  shift 108
	NEQ  shift 109
	AND  shift 110
	OR  shift 111
	'>'  shift 112
	'<'  shift 113
	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	';'  shift 159
	.  error


state 151
	return : RETURN exp . ';'  (26)
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)

	EQ  shift 106
	LEQ  shift 107
	GEQ  shift 108
	NEQ  shift 109
	AND  shift 110
	OR  shift 111
	'>'  shift 112
	'<'  shift 113
	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	';'  shift 160
	.  error


state 152
	metnormal : tipo ID '(' lparam ')' latri '{' corpomet return '}' .  (19)

	.  reduce 19


state 153
	chamaMetodo : ID '.' ID '(' . lparam ')'  (75)
	lparam : .  (22)

	ID  shift 12
	INT  shift 13
	DOUBLE  shift 14
	STRING  shift 15
	BOOLEAN  shift 16
	')'  reduce 22

	tipo  goto 42
	lparam  goto 161
	param  goto 44


state 154
	else : ELSE . ':' lcmd  (65)

	':'  shift 162
	.  error


state 155
	if : IF exp ':' lcmd else . endif  (64)

	ENDIF  shift 163
	.  error

	endif  goto 164


state 156
	lcmdloop : cmd lcmdloop .  (68)

	.  reduce 68


state 157
	endwhile : ENDWHILE .  (72)

	.  reduce 72


state 158
	while : WHILE exp ':' lcmdloop endwhile .  (71)

	.  reduce 71


state 159
	for : FOR ID '=' exp ';' . exp ';' exp ':' lcmdloop endfor  (73)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 165
	lvalue  goto 92
	chamaMetodo  goto 93


state 160
	return : RETURN exp ';' .  (26)

	.  reduce 26


state 161
	chamaMetodo : ID '.' ID '(' lparam . ')'  (75)

	')'  shift 166
	.  error


state 162
	else : ELSE ':' . lcmd  (65)
	lcmd : .  (52)

	ID  shift 65
	IF  shift 66
	ESCREVA  shift 67
	LEIA  shift 68
	WHILE  shift 69
	FOR  shift 70
	ENDIF  reduce 52

	lcmd  goto 167
	cmd  goto 73
	atrib  goto 74
	escrita  goto 75
	leia  goto 76
	if  goto 77
	while  goto 78
	for  goto 79


state 163
	endif : ENDIF .  (67)

	.  reduce 67


state 164
	if : IF exp ':' lcmd else endif .  (64)

	.  reduce 64


state 165
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)
	for : FOR ID '=' exp ';' exp . ';' exp ':' lcmdloop endfor  (73)

	EQ  shift 106
	LEQ  shift 107
	GEQ  shift 108
	NEQ  shift 109
	AND  shift 110
	OR  shift 111
	'>'  shift 112
	'<'  shift 113
	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	';'  shift 168
	.  error


state 166
	chamaMetodo : ID '.' ID '(' lparam ')' .  (75)

	.  reduce 75


state 167
	else : ELSE ':' lcmd .  (65)

	.  reduce 65


state 168
	for : FOR ID '=' exp ';' exp ';' . exp ':' lcmdloop endfor  (73)

	ID  shift 84
	NUM  shift 85
	LIT  shift 86
	TRUE  shift 87
	FALSE  shift 88
	NUMDOUBLE  shift 89
	'('  shift 90
	.  error

	exp  goto 169
	lvalue  goto 92
	chamaMetodo  goto 93


state 169
	exp : exp . '+' exp  (27)
	exp : exp . '*' exp  (28)
	exp : exp . '-' exp  (29)
	exp : exp . '/' exp  (30)
	exp : exp . '>' exp  (31)
	exp : exp . '<' exp  (32)
	exp : exp . AND exp  (33)
	exp : exp . OR exp  (34)
	exp : exp . LEQ exp  (35)
	exp : exp . GEQ exp  (36)
	exp : exp . EQ exp  (37)
	exp : exp . NEQ exp  (38)
	for : FOR ID '=' exp ';' exp ';' exp . ':' lcmdloop endfor  (73)

	EQ  shift 106
	LEQ  shift 107
	GEQ  shift 108
	NEQ  shift 109
	AND  shift 110
	OR  shift 111
	'>'  shift 112
	'<'  shift 113
	'+'  shift 114
	'-'  shift 115
	'*'  shift 116
	'/'  shift 117
	':'  shift 170
	.  error


state 170
	for : FOR ID '=' exp ';' exp ';' exp ':' . lcmdloop endfor  (73)
	lcmdloop : .  (70)

	ID  shift 65
	IF  shift 66
	ESCREVA  shift 67
	LEIA  shift 68
	BREAK  shift 147
	WHILE  shift 69
	FOR  shift 70
	ENDFOR  reduce 70

	cmd  goto 148
	atrib  goto 74
	escrita  goto 75
	leia  goto 76
	if  goto 77
	while  goto 78
	for  goto 79
	lcmdloop  goto 171


state 171
	for : FOR ID '=' exp ';' exp ';' exp ':' lcmdloop . endfor  (73)

	ENDFOR  shift 172
	.  error

	endfor  goto 173


state 172
	endfor : ENDFOR .  (74)

	.  reduce 74


state 173
	for : FOR ID '=' exp ';' exp ';' exp ':' lcmdloop endfor .  (73)

	.  reduce 73


57 terminals, 37 nonterminals
81 grammar rules, 174 states
